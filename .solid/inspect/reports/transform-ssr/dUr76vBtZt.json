{
  "resolvedId": "/home/yongqi/Repositories/yonggqiii.github.io/node_modules/solid-start/api/middleware.ts",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { Middleware } from \"../entry-server\";\nimport { FetchEvent, FETCH_EVENT } from \"../server/types\";\nimport { getApiHandler } from \"./index\";\nimport { internalFetch } from \"./internalFetch\";\n\nexport const apiRoutes: Middleware = ({ forward }) => {\n  return async (event: FetchEvent) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n",
      "start": 1720943855063,
      "end": 1720943855063
    },
    {
      "name": "solid-start-file-system-router",
      "start": 1720943855063,
      "end": 1720943855063,
      "order": "pre"
    },
    {
      "name": "solid",
      "start": 1720943855063,
      "end": 1720943855063,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720943855063,
      "end": 1720943855063,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { FETCH_EVENT } from \"../server/types\";\nimport { getApiHandler } from \"./index\";\nimport { internalFetch } from \"./internalFetch\";\nexport const apiRoutes = ({ forward }) => {\n  return async (event) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n",
      "start": 1720943855063,
      "end": 1720943855109,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "middleware.ts"
        ],
        "sourcesContent": [
          "import { Middleware } from \"../entry-server\";\nimport { FetchEvent, FETCH_EVENT } from \"../server/types\";\nimport { getApiHandler } from \"./index\";\nimport { internalFetch } from \"./internalFetch\";\n\nexport const apiRoutes: Middleware = ({ forward }) => {\n  return async (event: FetchEvent) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n"
        ],
        "mappings": "AACA,SAAqB,mBAAmB;AACxC,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB;AAEvB,aAAM,YAAwB,CAAC,EAAE,QAAQ,MAAM;AACpD,SAAO,OAAO,UAAsB;AAClC,QAAI,aAAa,cAAc,IAAI,IAAI,MAAM,QAAQ,GAAG,GAAG,MAAM,QAAQ,MAAM;AAC/E,QAAI,YAAY;AACd,UAAI,WAAW,OAAO,OAAO;AAAA,QAC3B,SAAS,MAAM;AAAA,QACf,eAAe,MAAM;AAAA,QACrB,QAAQ,MAAM;AAAA,QACd,QAAQ,WAAW;AAAA,QACnB,KAAK,MAAM;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,MACT,CAAC;AACD,UAAI;AACF,eAAO,MAAM,WAAW,QAAQ,QAAQ;AAAA,MAC1C,SAAS,OAAO;AACd,YAAI,iBAAiB,UAAU;AAC7B,iBAAO;AAAA,QACT;AACA,eAAO,IAAI,SAAS,KAAK,UAAU,KAAK,GAAG;AAAA,UACzC,QAAQ;AAAA,QACV,CAAC;AAAA,MACH;AAAA,IACF;AACA,WAAO,MAAM,QAAQ,KAAK;AAAA,EAC5B;AACF;",
        "names": [],
        "x_google_ignoreList": [
          0
        ]
      }
    },
    {
      "name": "vite:json",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "solid-start-server",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { FETCH_EVENT } from \"../server/types\";\nimport { getApiHandler } from \"./index\";\nimport { internalFetch } from \"./internalFetch\";\nexport const apiRoutes = ({ forward }) => {\n  return async (event) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { FETCH_EVENT } from \"/node_modules/solid-start/server/types.tsx\";\nimport { getApiHandler } from \"/node_modules/solid-start/api/index.ts\";\nimport { internalFetch } from \"/node_modules/solid-start/api/internalFetch.ts\";\nexport const apiRoutes = ({ forward }) => {\n  return async (event) => {\n    let apiHandler = getApiHandler(new URL(event.request.url), event.request.method);\n    if (apiHandler) {\n      let apiEvent = Object.freeze({\n        request: event.request,\n        clientAddress: event.clientAddress,\n        locals: event.locals,\n        params: apiHandler.params,\n        env: event.env,\n        $type: FETCH_EVENT,\n        fetch: internalFetch\n      });\n      try {\n        return await apiHandler.handler(apiEvent);\n      } catch (error) {\n        if (error instanceof Response) {\n          return error;\n        }\n        return new Response(JSON.stringify(error), {\n          status: 500\n        });\n      }\n    }\n    return await forward(event);\n  };\n};\n",
      "start": 1720943855109,
      "end": 1720943855109,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
