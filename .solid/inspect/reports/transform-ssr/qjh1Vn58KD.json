{
  "resolvedId": "/home/yongqi/Repositories/yonggqiii.github.io/node_modules/solid-start/entry-server/StartServer.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { MetaProvider } from \"@solidjs/meta\";\nimport { RouteDataFunc, Router, RouterProps } from \"@solidjs/router\";\nimport { ComponentProps, sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"~start/root\";\n\nimport { RouteDefinition, Router as IslandsRouter } from \"../islands/server-router\";\n\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FetchEvent, PageEvent } from \"../server/types\";\n\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", { eager: true }))[0] as {\n  default: RouteDataFunc;\n};\nconst dataFn: RouteDataFunc | undefined = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\nexport type Middleware = (input: MiddlewareInput) => MiddlewareFn;\n\n/** Input parameters for to an Exchange factory function. */\nexport interface MiddlewareInput {\n  forward: MiddlewareFn;\n}\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\nexport type MiddlewareFn = (event: FetchEvent) => Promise<Response> | Response;\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware =\n  (exchanges: Middleware[]) =>\n  ({ forward }: MiddlewareInput) =>\n    exchanges.reduceRight(\n      (forward, exchange) =>\n        exchange({\n          forward\n        }),\n      forward\n    );\n\nexport function createHandler(...exchanges: Middleware[]) {\n  const exchange = composeMiddleware(exchanges);\n  return async (event: FetchEvent) => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\n\nexport function StartRouter(\n  props: RouterProps & {\n    location: string;\n    prevLocation: string;\n    routes: RouteDefinition | RouteDefinition[];\n  }\n) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return (\n      <Router {...props}>\n        <IslandsRouter {...props}>{props.children}</IslandsRouter>\n      </Router>\n    );\n  }\n  return <Router {...props}></Router>;\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !import.meta.env.START_SSR;\n\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({ event }: { event: PageEvent }) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return (\n    <ServerContext.Provider value={event}>\n      {devNoSSR ? (\n        <>\n          {docType as unknown as any}\n          <Root />\n        </>\n      ) : (\n        <MetaProvider tags={event.tags as ComponentProps<typeof MetaProvider>[\"tags\"]}>\n          <StartRouter\n            url={path}\n            out={event.routerContext}\n            location={path}\n            prevLocation={event.prevUrl}\n            data={dataFn}\n            routes={fileRoutes}\n          >\n            {docType as unknown as any}\n            <Root />\n          </StartRouter>\n        </MetaProvider>\n      )}\n    </ServerContext.Provider>\n  );\n}\n",
      "start": 1702914706637,
      "end": 1702914706637
    },
    {
      "name": "solid-start-file-system-router",
      "start": 1702914706637,
      "end": 1702914706637,
      "order": "pre"
    },
    {
      "name": "solid",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** Input parameters for to an Exchange factory function. */\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !import.meta.env.START_SSR;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1702914706637,
      "end": 1702914706697,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "MetaProvider",
          "Router",
          "sharedConfig",
          "ssr",
          "Root",
          "IslandsRouter",
          "fileRoutes",
          "ServerContext",
          "rootData",
          "Object",
          "values",
          "import",
          "meta",
          "glob",
          "eager",
          "dataFn",
          "default",
          "undefined",
          "composeMiddleware",
          "exchanges",
          "forward",
          "reduceRight",
          "exchange",
          "createHandler",
          "event",
          "op",
          "Response",
          "status",
          "StartRouter",
          "props",
          "env",
          "START_ISLANDS_ROUTER",
          "_$createComponent",
          "_$mergeProps",
          "children",
          "devNoSSR",
          "DEV",
          "START_SSR",
          "docType",
          "StartServer",
          "parsed",
          "URL",
          "request",
          "url",
          "path",
          "pathname",
          "search",
          "context",
          "requestContext",
          "Provider",
          "value",
          "tags",
          "out",
          "routerContext",
          "location",
          "prevLocation",
          "prevUrl",
          "data",
          "routes"
        ],
        "sources": [
          "StartServer.tsx"
        ],
        "sourcesContent": [
          "import { MetaProvider } from \"@solidjs/meta\";\nimport { RouteDataFunc, Router, RouterProps } from \"@solidjs/router\";\nimport { ComponentProps, sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"~start/root\";\n\nimport { RouteDefinition, Router as IslandsRouter } from \"../islands/server-router\";\n\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FetchEvent, PageEvent } from \"../server/types\";\n\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", { eager: true }))[0] as {\n  default: RouteDataFunc;\n};\nconst dataFn: RouteDataFunc | undefined = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\nexport type Middleware = (input: MiddlewareInput) => MiddlewareFn;\n\n/** Input parameters for to an Exchange factory function. */\nexport interface MiddlewareInput {\n  forward: MiddlewareFn;\n}\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\nexport type MiddlewareFn = (event: FetchEvent) => Promise<Response> | Response;\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware =\n  (exchanges: Middleware[]) =>\n  ({ forward }: MiddlewareInput) =>\n    exchanges.reduceRight(\n      (forward, exchange) =>\n        exchange({\n          forward\n        }),\n      forward\n    );\n\nexport function createHandler(...exchanges: Middleware[]) {\n  const exchange = composeMiddleware(exchanges);\n  return async (event: FetchEvent) => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\n\nexport function StartRouter(\n  props: RouterProps & {\n    location: string;\n    prevLocation: string;\n    routes: RouteDefinition | RouteDefinition[];\n  }\n) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return (\n      <Router {...props}>\n        <IslandsRouter {...props}>{props.children}</IslandsRouter>\n      </Router>\n    );\n  }\n  return <Router {...props}></Router>;\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !import.meta.env.START_SSR;\n\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({ event }: { event: PageEvent }) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return (\n    <ServerContext.Provider value={event}>\n      {devNoSSR ? (\n        <>\n          {docType as unknown as any}\n          <Root />\n        </>\n      ) : (\n        <MetaProvider tags={event.tags as ComponentProps<typeof MetaProvider>[\"tags\"]}>\n          <StartRouter\n            url={path}\n            out={event.routerContext}\n            location={path}\n            prevLocation={event.prevUrl}\n            data={dataFn}\n            routes={fileRoutes}\n          >\n            {docType as unknown as any}\n            <Root />\n          </StartRouter>\n        </MetaProvider>\n      )}\n    </ServerContext.Provider>\n  );\n}\n"
        ],
        "mappings": "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",
        "x_google_ignoreList": [
          0
        ]
      }
    },
    {
      "name": "vite:css",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "solid-start-server",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** Input parameters for to an Exchange factory function. */\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !true;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702914706697,
      "end": 1702914706697,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({\n\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** Input parameters for to an Exchange factory function. */\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !true;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1702914706697,
      "end": 1702914706711,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:client-inject",
      "start": 1702914706711,
      "end": 1702914706711,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":true};import.meta.env.START_SSR = true;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"/home/yongqi/Repositories/yonggqiii.github.io/src/entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"/home/yongqi/Repositories/yonggqiii.github.io/src/entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"static\";import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"/node_modules/@solidjs/meta/dist/index.jsx\";\nimport { Router } from \"/node_modules/@solidjs/router/dist/index.jsx\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\n// @ts-ignore\nimport Root from \"/src/root.tsx\";\nimport { Router as IslandsRouter } from \"/node_modules/solid-start/islands/server-router.tsx\";\nimport { fileRoutes } from \"/node_modules/solid-start/root/FileRoutes.tsx\";\nimport { ServerContext } from \"/node_modules/solid-start/server/ServerContext.tsx\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({\n\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** Input parameters for to an Exchange factory function. */\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware(exchanges);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\n\n// @ts-ignore\nconst devNoSSR = import.meta.env.DEV && !true;\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return devNoSSR ? [docType, _$createComponent(Root, {})] : _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1702914706711,
      "end": 1702914706714,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
