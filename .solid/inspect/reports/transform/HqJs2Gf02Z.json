{
  "resolvedId": "/home/yongqi/Repositories/yonggqiii.github.io/node_modules/solid-start/root/InlineStyles.tsx?v=086a2f5f",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { Style } from \"@solidjs/meta\";\nimport { createResource, Show, Suspense, useContext } from \"solid-js\";\nimport type { PageEvent } from \"../server\";\nimport { ServerContext } from \"../server/ServerContext\";\n\ndeclare global {\n  const $ROUTE_LAYOUTS: Record<string, { layouts: any[], id: string }>\n}\n\nvar routeLayouts = $ROUTE_LAYOUTS;\n\nexport { routeLayouts };\n\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nasync function getInlineStyles(env: PageEvent[\"env\"], routerContext: RouterContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo: string[], m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev!.manifest!.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev!.manifest!.find(entry => entry.path === fullPath)!.componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(\n          ...route.layouts\n            .map((key: string) => env.__dev!.manifest!.find(entry => entry.path === key || entry.id === key))\n            .filter(entry => entry)\n            .map(entry => entry!.componentPath)\n        );\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev!.collectStyles!(match);\n  return styles;\n}\n\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n\n  const [resource] = createResource(\n    async () => {\n      if (import.meta.env.SSR) {\n        return await getInlineStyles(context!.env, context!.routerContext!);\n      } else {\n        return {};\n      }\n    },\n    {\n      deferStream: true\n    }\n  );\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return (\n    <Suspense>\n      <Show when={resource()} keyed>\n        {resource => {\n          return (\n            <Style>\n              {Object.entries(resource)\n                .filter(([k]) => style_pattern.test(k))\n                .map(([k, v]) => {\n                  return `/* ${k} */\\n` + v;\n                })\n                .join(\"\\n\") + \" \"}\n            </Style>\n          );\n        }}\n      </Show>\n    </Suspense>\n  );\n}\n",
      "start": 1702914708070,
      "end": 1702914708070
    },
    {
      "name": "solid-start-file-system-router",
      "result": "import { Style } from \"@solidjs/meta\";\nimport { createResource, Show, Suspense, useContext } from \"solid-js\";\nimport type { PageEvent } from \"../server\";\nimport { ServerContext } from \"../server/ServerContext\";\n\ndeclare global {\n  const $ROUTE_LAYOUTS: Record<string, { layouts: any[], id: string }>\n}\n\nconst routeLayouts = {\"/*404\":{\"id\":\"/*404\",\"layouts\":[]},\"/fun\":{\"id\":\"/fun\",\"layouts\":[]},\"/\":{\"id\":\"/\",\"layouts\":[]},\"/research\":{\"id\":\"/research\",\"layouts\":[]},\"/teaching\":{\"id\":\"/teaching\",\"layouts\":[]},\"/cv/\":{\"id\":\"/cv/\",\"layouts\":[]}};\n\nexport { routeLayouts };\n\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nasync function getInlineStyles(env: PageEvent[\"env\"], routerContext: RouterContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo: string[], m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev!.manifest!.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev!.manifest!.find(entry => entry.path === fullPath)!.componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(\n          ...route.layouts\n            .map((key: string) => env.__dev!.manifest!.find(entry => entry.path === key || entry.id === key))\n            .filter(entry => entry)\n            .map(entry => entry!.componentPath)\n        );\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev!.collectStyles!(match);\n  return styles;\n}\n\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n\n  const [resource] = createResource(\n    async () => {\n      if (import.meta.env.SSR) {\n        return await getInlineStyles(context!.env, context!.routerContext!);\n      } else {\n        return {};\n      }\n    },\n    {\n      deferStream: true\n    }\n  );\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return (\n    <Suspense>\n      <Show when={resource()} keyed>\n        {resource => {\n          return (\n            <Style>\n              {Object.entries(resource)\n                .filter(([k]) => style_pattern.test(k))\n                .map(([k, v]) => {\n                  return `/* ${k} */\\n` + v;\n                })\n                .join(\"\\n\") + \" \"}\n            </Style>\n          );\n        }}\n      </Show>\n    </Suspense>\n  );\n}\n",
      "start": 1702914708070,
      "end": 1702914708070,
      "order": "pre"
    },
    {
      "name": "solid",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { Style } from \"@solidjs/meta\";\nimport { createResource, Show, Suspense, useContext } from \"solid-js\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst routeLayouts = {\n  \"/*404\": {\n    \"id\": \"/*404\",\n    \"layouts\": []\n  },\n  \"/fun\": {\n    \"id\": \"/fun\",\n    \"layouts\": []\n  },\n  \"/\": {\n    \"id\": \"/\",\n    \"layouts\": []\n  },\n  \"/research\": {\n    \"id\": \"/research\",\n    \"layouts\": []\n  },\n  \"/teaching\": {\n    \"id\": \"/teaching\",\n    \"layouts\": []\n  },\n  \"/cv/\": {\n    \"id\": \"/cv/\",\n    \"layouts\": []\n  }\n};\nexport { routeLayouts };\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\nasync function getInlineStyles(env, routerContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev.manifest.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev.manifest.find(entry => entry.path === fullPath).componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...route.layouts.map(key => env.__dev.manifest.find(entry => entry.path === key || entry.id === key)).filter(entry => entry).map(entry => entry.componentPath));\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev.collectStyles(match);\n  return styles;\n}\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n  const [resource] = createResource(async () => {\n    if (import.meta.env.SSR) {\n      return await getInlineStyles(context.env, context.routerContext);\n    } else {\n      return {};\n    }\n  }, {\n    deferStream: true\n  });\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return _$createComponent(Suspense, {\n    get children() {\n      return _$createComponent(Show, {\n        get when() {\n          return resource();\n        },\n        keyed: true,\n        children: resource => {\n          return _$createComponent(Style, {\n            get children() {\n              return Object.entries(resource).filter(([k]) => style_pattern.test(k)).map(([k, v]) => {\n                return `/* ${k} */\\n` + v;\n              }).join(\"\\n\") + \" \";\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1702914708070,
      "end": 1702914708083,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "Style",
          "createResource",
          "Show",
          "Suspense",
          "useContext",
          "ServerContext",
          "routeLayouts",
          "style_pattern",
          "getInlineStyles",
          "env",
          "routerContext",
          "match",
          "matches",
          "reduce",
          "memo",
          "m",
          "length",
          "fullPath",
          "previous",
          "originalPath",
          "__dev",
          "manifest",
          "find",
          "entry",
          "path",
          "push",
          "componentPath",
          "route",
          "layouts",
          "map",
          "key",
          "id",
          "filter",
          "import",
          "meta",
          "START_ENTRY_SERVER",
          "styles",
          "collectStyles",
          "InlineStyles",
          "isDev",
          "MODE",
          "context",
          "START_SSR",
          "resource",
          "SSR",
          "deferStream",
          "_$createComponent",
          "children",
          "when",
          "keyed",
          "Object",
          "entries",
          "k",
          "test",
          "v",
          "join"
        ],
        "sources": [
          "InlineStyles.tsx"
        ],
        "sourcesContent": [
          "import { Style } from \"@solidjs/meta\";\nimport { createResource, Show, Suspense, useContext } from \"solid-js\";\nimport type { PageEvent } from \"../server\";\nimport { ServerContext } from \"../server/ServerContext\";\n\ndeclare global {\n  const $ROUTE_LAYOUTS: Record<string, { layouts: any[], id: string }>\n}\n\nconst routeLayouts = {\"/*404\":{\"id\":\"/*404\",\"layouts\":[]},\"/fun\":{\"id\":\"/fun\",\"layouts\":[]},\"/\":{\"id\":\"/\",\"layouts\":[]},\"/research\":{\"id\":\"/research\",\"layouts\":[]},\"/teaching\":{\"id\":\"/teaching\",\"layouts\":[]},\"/cv/\":{\"id\":\"/cv/\",\"layouts\":[]}};\n\nexport { routeLayouts };\n\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nasync function getInlineStyles(env: PageEvent[\"env\"], routerContext: RouterContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo: string[], m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev!.manifest!.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev!.manifest!.find(entry => entry.path === fullPath)!.componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(\n          ...route.layouts\n            .map((key: string) => env.__dev!.manifest!.find(entry => entry.path === key || entry.id === key))\n            .filter(entry => entry)\n            .map(entry => entry!.componentPath)\n        );\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev!.collectStyles!(match);\n  return styles;\n}\n\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n\n  const [resource] = createResource(\n    async () => {\n      if (import.meta.env.SSR) {\n        return await getInlineStyles(context!.env, context!.routerContext!);\n      } else {\n        return {};\n      }\n    },\n    {\n      deferStream: true\n    }\n  );\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return (\n    <Suspense>\n      <Show when={resource()} keyed>\n        {resource => {\n          return (\n            <Style>\n              {Object.entries(resource)\n                .filter(([k]) => style_pattern.test(k))\n                .map(([k, v]) => {\n                  return `/* ${k} */\\n` + v;\n                })\n                .join(\"\\n\") + \" \"}\n            </Style>\n          );\n        }}\n      </Show>\n    </Suspense>\n  );\n}\n"
        ],
        "mappings": "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",
        "x_google_ignoreList": [
          0
        ]
      }
    },
    {
      "name": "vite:css",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "solid-start-server",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1702914708083,
      "end": 1702914708083,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":false};import.meta.env.START_SSR = true;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"/home/yongqi/Repositories/yonggqiii.github.io/src/entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"/home/yongqi/Repositories/yonggqiii.github.io/src/entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"static\";import { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=086a2f5f\";\nimport { Style } from \"/node_modules/@solidjs/meta/dist/index.jsx?v=086a2f5f\";\nimport { createResource, Show, Suspense, useContext } from \"/node_modules/.vite/deps/solid-js.js?v=086a2f5f\";\nimport { ServerContext } from \"/node_modules/solid-start/server/ServerContext.tsx?v=086a2f5f\";\nconst routeLayouts = {\n  \"/*404\": {\n    \"id\": \"/*404\",\n    \"layouts\": []\n  },\n  \"/fun\": {\n    \"id\": \"/fun\",\n    \"layouts\": []\n  },\n  \"/\": {\n    \"id\": \"/\",\n    \"layouts\": []\n  },\n  \"/research\": {\n    \"id\": \"/research\",\n    \"layouts\": []\n  },\n  \"/teaching\": {\n    \"id\": \"/teaching\",\n    \"layouts\": []\n  },\n  \"/cv/\": {\n    \"id\": \"/cv/\",\n    \"layouts\": []\n  }\n};\nexport { routeLayouts };\nconst style_pattern = /\\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/;\nasync function getInlineStyles(env, routerContext) {\n  const match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      if (env.__dev.manifest.find(entry => entry.path === fullPath)) {\n        memo.push(env.__dev.manifest.find(entry => entry.path === fullPath).componentPath);\n      }\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...route.layouts.map(key => env.__dev.manifest.find(entry => entry.path === key || entry.id === key)).filter(entry => entry).map(entry => entry.componentPath));\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(import.meta.env.START_ENTRY_SERVER);\n  const styles = await env.__dev.collectStyles(match);\n  return styles;\n}\nexport function InlineStyles() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  if (!isDev || !import.meta.env.START_SSR) {\n    return null;\n  }\n  const [resource] = createResource(async () => {\n    if (import.meta.env.SSR) {\n      return await getInlineStyles(context.env, context.routerContext);\n    } else {\n      return {};\n    }\n  }, {\n    deferStream: true\n  });\n\n  // We need a space here to prevent the server from collapsing the space between the style tags\n  // and making it invalid\n  return _$createComponent(Suspense, {\n    get children() {\n      return _$createComponent(Show, {\n        get when() {\n          return resource();\n        },\n        keyed: true,\n        children: resource => {\n          return _$createComponent(Style, {\n            get children() {\n              return Object.entries(resource).filter(([k]) => style_pattern.test(k)).map(([k, v]) => {\n                return `/* ${k} */\\n` + v;\n              }).join(\"\\n\") + \" \";\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1702914708083,
      "end": 1702914708084,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
