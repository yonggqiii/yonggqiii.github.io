{
  "resolvedId": "/home/yongqi/Repositories/yonggqiii.github.io/src/routes/teaching.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { Title } from \"solid-start\";\nimport Card from \"../components/Card\";\nexport default function Teaching() {\n  return (\n    <main>\n      <Title>Teaching - Foo Yong Qi</Title>\n      <h1>Teaching</h1>\n      <Card header=\"IT5001\" header_color=\"yellow\" border=\"peach\">\n        <em>Software Development Fundamentals</em>\n        <h3>Course Description</h3>\n        <p>\n          This module aims to introduce non-computing students to the principles\n          and concepts of software development at an accelerated pace. Students\n          will be introduced to the basics of programming (control flow, code\n          and data abstraction, recursion, types, OO), development methodology\n          (ensuring correctness, testing, debugging), simple data structures and\n          algorithms (lists, maps, sorting), and software engineering\n          principles. Through hands on assignments and projects, students will\n          learn good software development practices (documentation, style) and\n          experience a typical software engineering cycle.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY23/24 Semester 2</li> <li>AY22/23 Semester 2</li>{\" \"}\n          <li>AY22/23 Semester 1</li> <li>AY21/22 Semester 2</li>{\" \"}\n          <li>AY21/22 Semester 1</li>\n          <li> AY20/21 Semester 2</li>\n        </ul>\n      </Card>\n      <Card header=\"IT5100E\" header_color=\"green\" border=\"lavender\">\n        <em>Industry Readiness: Security Best Practices</em>\n        <h3>Course Description</h3>\n        <p>\n          Malicious exploitation of vulnerable applications running on the web\n          can have disastrous consequences. This module aims to introduce\n          application security considerations and provide practical experience\n          on secure coding practices, focusing on web-based applications. Topics\n          covered include fundamental security concepts (e.g., encryption,\n          authentication, authorization), secure coding practices (e.g.,\n          handling of cookies, passwords, errors), secure design and deployment\n          principles (e.g., threat modelling, vulnerability scanning), along\n          with industry standards (e.g., OWASP), tools, common threats and\n          defense against them.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY23/24 Semester 1</p>\n      </Card>\n      <Card header=\"IT5100B\" header_color=\"blue\" border=\"maroon\">\n        <em>High-Throughput Stream Programming</em>\n        <h3>Course Description</h3>\n        <p>\n          The global availability of data has reached a level where aggregating\n          data into generic, general-purpose “stores” is no longer feasible.\n          Having data collections statically available for querying by\n          interested parties on demand is increasingly becoming the way of the\n          past. Instead, a new paradigm, called Data Streaming, has emerged\n          recently. In this paradigm, data is bundled into high-throughput\n          \"streams\" that are sharded efficiently across a large number of\n          network nodes. Consumers, sometimes counted in hundreds of thousands,\n          or millions, \"subscribe\" to data subsets and are notified when new\n          data becomes available, being under the obligation to process it\n          immediately, or lose it. Consequently, data storage is no longer\n          centralized, but rather distributed into many smaller-sized abstract\n          collections. This new approach to \"Big Data\" requires a new set of\n          tools, platforms, and solution patterns. In this course we propose to\n          explore several facets of this new paradigm:\n        </p>\n        <ul>\n          <li>The Stream paradigm introduced in Java 8.</li>\n          <li>\n            Platforms that implement Data Streaming, such as Kafka, and the Java\n            bindings in the library KafkaConnect.\n          </li>\n          <li>\n            Computing paradigms for stream processing, such as Reactive\n            Programming, and the library RxJava.\n          </li>\n          <li>High-performance stream computing platforms, such as Flink.</li>\n        </ul>\n        <p>\n          The course will be using Java as the main vehicle for introducing\n          concepts and showcasing examples.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY23/24 Semester 2</p>\n      </Card>\n      <Card header=\"IT5003\" header_color=\"lavender\" border=\"red\">\n        <em>Data Structures & Algorithms</em>\n        <h3>Course Description</h3>\n        <p>\n          This module introduces non-computing students to efficient\n          computational problem solving in an accelerated pace. Students will\n          learn to formulate a computational problem, identify the data required\n          and come up with appropriate data structures to represent them, and\n          apply known strategies to design an algorithm to solve the problem.\n          Students will also learn to quantify the space and time complexity of\n          an algorithm, prove the correctness of an algorithm, and the limits of\n          computation. Topics include common data structures and their\n          algorithms (lists, hash tables, heap, trees, graphs), algorithmic\n          problem solving paradigms (greedy, divide and conquer, dynamic\n          programming), and NP-completeness.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY20/21 Semester 2</p>\n      </Card>\n      <Card header=\"IT5004\" header_color=\"peach\" border=\"teal\">\n        <em>Enterprise Systems Architecture Fundamentals</em>\n        <h3>Course Description</h3>\n        <p>\n          This module aims to equip non-computing students with fundamental\n          knowledge in architecting and designing modern Enterprise Systems in\n          organisations that can be reasonably complex, scalable, distributed,\n          component-based and missioncritical. Students will develop an\n          understanding of high-level concepts such as enterprise architecture\n          and software architecture. They will them move on to acquire\n          fundamental systems analysis and design techniques such as\n          object-oriented requirements analysis and design using the Unified\n          Modelling Language.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY20/21 Semester 2</p>\n      </Card>\n      <Card header=\"CS1010E\" header_color=\"rosewater\" border=\"green\">\n        <em>Programming Methodology</em>\n        <h3>Course Description</h3>\n        <p>\n          This module introduces the fundamental concepts of problem solving by\n          computing and programming using an imperative programming language. It\n          is the first and foremost introductory course to computing. Topics\n          covered include computational thinking and computational problem\n          solving, designing and specifying an algorithm, basic problem\n          formulation and problem solving approaches, program development,\n          coding, testing and debugging, fundamental programming constructs\n          (variables, types, expressions, assignments, functions, control\n          structures, etc.), fundamental data structures (arrays, strings,\n          composite data types), basic sorting, and recursion.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY20/21 Semester 1</li>\n          <li>AY19/20 Special Term 2</li>\n          <li>AY19/20 Semester 2</li>\n          <li>AY19/20 Semester 1</li>\n          <li>AY18/19 Semester 2</li>\n          <li>AY18/19 Semester 1</li>\n        </ul>\n      </Card>\n      <Card header=\"CS2030/S\" header_color=\"mauve\" border=\"flamingo\">\n        <em>Programming Methodology</em>\n        <h3>Course Description</h3>\n        <p>\n          This module is a follow up to CS1010. It explores two modern\n          programming paradigms, object-oriented programming and functional\n          programming. Through a series of integrated assignments, students will\n          learn to develop medium-scale software programs in the order of\n          thousands of lines of code and tens of classes using objectoriented\n          design principles and advanced programming constructs available in the\n          two paradigms. Topics include objects and classes, composition,\n          association, inheritance, interface, polymorphism, abstract classes,\n          dynamic binding, lambda expression, effect-free programming, first\n          class functions, closures, continuations, monad, etc.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY20/21 Semester 1</li>\n          <li>AY19/20 Special Term 1</li>\n          <li>AY19/20 Semester 2</li>\n          <li>AY19/20 Semester 1</li>\n          <li>AY18/19 Semester 2</li>\n        </ul>\n      </Card>\n    </main>\n  );\n}\n",
      "start": 1698297491147,
      "end": 1698297491147,
      "sourcemaps": {
        "version": 3,
        "names": [
          "Title",
          "Card",
          "Teaching",
          "_el$",
          "_$getNextElement",
          "_tmpl$24",
          "_el$40",
          "firstChild",
          "_el$41",
          "_co$",
          "_$getNextMarker",
          "nextSibling",
          "_el$2",
          "_el$42",
          "_el$43",
          "_co$2",
          "_el$44",
          "_el$45",
          "_co$3",
          "_el$46",
          "_el$47",
          "_co$4",
          "_el$48",
          "_el$49",
          "_co$5",
          "_el$50",
          "_el$51",
          "_co$6",
          "_el$52",
          "_el$53",
          "_co$7",
          "_el$54",
          "_el$55",
          "_co$8",
          "_$insert",
          "_$createComponent",
          "children",
          "header",
          "header_color",
          "border",
          "_tmpl$",
          "_tmpl$2",
          "_tmpl$3",
          "_tmpl$4",
          "_tmpl$5",
          "_tmpl$6",
          "_tmpl$7",
          "_tmpl$8",
          "_tmpl$9",
          "_tmpl$10",
          "_tmpl$11",
          "_tmpl$12",
          "_tmpl$13",
          "_tmpl$14",
          "_tmpl$15",
          "_tmpl$16",
          "_tmpl$17",
          "_tmpl$18",
          "_tmpl$19",
          "_tmpl$20",
          "_tmpl$21",
          "_tmpl$22",
          "_tmpl$23"
        ],
        "sources": [
          "/home/yongqi/Repositories/yonggqiii.github.io/src/routes/teaching.tsx"
        ],
        "sourcesContent": [
          "import { Title } from \"solid-start\";\nimport Card from \"../components/Card\";\nexport default function Teaching() {\n  return (\n    <main>\n      <Title>Teaching - Foo Yong Qi</Title>\n      <h1>Teaching</h1>\n      <Card header=\"IT5001\" header_color=\"yellow\" border=\"peach\">\n        <em>Software Development Fundamentals</em>\n        <h3>Course Description</h3>\n        <p>\n          This module aims to introduce non-computing students to the principles\n          and concepts of software development at an accelerated pace. Students\n          will be introduced to the basics of programming (control flow, code\n          and data abstraction, recursion, types, OO), development methodology\n          (ensuring correctness, testing, debugging), simple data structures and\n          algorithms (lists, maps, sorting), and software engineering\n          principles. Through hands on assignments and projects, students will\n          learn good software development practices (documentation, style) and\n          experience a typical software engineering cycle.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY23/24 Semester 2</li> <li>AY22/23 Semester 2</li>{\" \"}\n          <li>AY22/23 Semester 1</li> <li>AY21/22 Semester 2</li>{\" \"}\n          <li>AY21/22 Semester 1</li>\n          <li> AY20/21 Semester 2</li>\n        </ul>\n      </Card>\n      <Card header=\"IT5100E\" header_color=\"green\" border=\"lavender\">\n        <em>Industry Readiness: Security Best Practices</em>\n        <h3>Course Description</h3>\n        <p>\n          Malicious exploitation of vulnerable applications running on the web\n          can have disastrous consequences. This module aims to introduce\n          application security considerations and provide practical experience\n          on secure coding practices, focusing on web-based applications. Topics\n          covered include fundamental security concepts (e.g., encryption,\n          authentication, authorization), secure coding practices (e.g.,\n          handling of cookies, passwords, errors), secure design and deployment\n          principles (e.g., threat modelling, vulnerability scanning), along\n          with industry standards (e.g., OWASP), tools, common threats and\n          defense against them.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY23/24 Semester 1</p>\n      </Card>\n      <Card header=\"IT5100B\" header_color=\"blue\" border=\"maroon\">\n        <em>High-Throughput Stream Programming</em>\n        <h3>Course Description</h3>\n        <p>\n          The global availability of data has reached a level where aggregating\n          data into generic, general-purpose “stores” is no longer feasible.\n          Having data collections statically available for querying by\n          interested parties on demand is increasingly becoming the way of the\n          past. Instead, a new paradigm, called Data Streaming, has emerged\n          recently. In this paradigm, data is bundled into high-throughput\n          \"streams\" that are sharded efficiently across a large number of\n          network nodes. Consumers, sometimes counted in hundreds of thousands,\n          or millions, \"subscribe\" to data subsets and are notified when new\n          data becomes available, being under the obligation to process it\n          immediately, or lose it. Consequently, data storage is no longer\n          centralized, but rather distributed into many smaller-sized abstract\n          collections. This new approach to \"Big Data\" requires a new set of\n          tools, platforms, and solution patterns. In this course we propose to\n          explore several facets of this new paradigm:\n        </p>\n        <ul>\n          <li>The Stream paradigm introduced in Java 8.</li>\n          <li>\n            Platforms that implement Data Streaming, such as Kafka, and the Java\n            bindings in the library KafkaConnect.\n          </li>\n          <li>\n            Computing paradigms for stream processing, such as Reactive\n            Programming, and the library RxJava.\n          </li>\n          <li>High-performance stream computing platforms, such as Flink.</li>\n        </ul>\n        <p>\n          The course will be using Java as the main vehicle for introducing\n          concepts and showcasing examples.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY23/24 Semester 2</p>\n      </Card>\n      <Card header=\"IT5003\" header_color=\"lavender\" border=\"red\">\n        <em>Data Structures & Algorithms</em>\n        <h3>Course Description</h3>\n        <p>\n          This module introduces non-computing students to efficient\n          computational problem solving in an accelerated pace. Students will\n          learn to formulate a computational problem, identify the data required\n          and come up with appropriate data structures to represent them, and\n          apply known strategies to design an algorithm to solve the problem.\n          Students will also learn to quantify the space and time complexity of\n          an algorithm, prove the correctness of an algorithm, and the limits of\n          computation. Topics include common data structures and their\n          algorithms (lists, hash tables, heap, trees, graphs), algorithmic\n          problem solving paradigms (greedy, divide and conquer, dynamic\n          programming), and NP-completeness.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY20/21 Semester 2</p>\n      </Card>\n      <Card header=\"IT5004\" header_color=\"peach\" border=\"teal\">\n        <em>Enterprise Systems Architecture Fundamentals</em>\n        <h3>Course Description</h3>\n        <p>\n          This module aims to equip non-computing students with fundamental\n          knowledge in architecting and designing modern Enterprise Systems in\n          organisations that can be reasonably complex, scalable, distributed,\n          component-based and missioncritical. Students will develop an\n          understanding of high-level concepts such as enterprise architecture\n          and software architecture. They will them move on to acquire\n          fundamental systems analysis and design techniques such as\n          object-oriented requirements analysis and design using the Unified\n          Modelling Language.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY20/21 Semester 2</p>\n      </Card>\n      <Card header=\"CS1010E\" header_color=\"rosewater\" border=\"green\">\n        <em>Programming Methodology</em>\n        <h3>Course Description</h3>\n        <p>\n          This module introduces the fundamental concepts of problem solving by\n          computing and programming using an imperative programming language. It\n          is the first and foremost introductory course to computing. Topics\n          covered include computational thinking and computational problem\n          solving, designing and specifying an algorithm, basic problem\n          formulation and problem solving approaches, program development,\n          coding, testing and debugging, fundamental programming constructs\n          (variables, types, expressions, assignments, functions, control\n          structures, etc.), fundamental data structures (arrays, strings,\n          composite data types), basic sorting, and recursion.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY20/21 Semester 1</li>\n          <li>AY19/20 Special Term 2</li>\n          <li>AY19/20 Semester 2</li>\n          <li>AY19/20 Semester 1</li>\n          <li>AY18/19 Semester 2</li>\n          <li>AY18/19 Semester 1</li>\n        </ul>\n      </Card>\n      <Card header=\"CS2030/S\" header_color=\"mauve\" border=\"flamingo\">\n        <em>Programming Methodology</em>\n        <h3>Course Description</h3>\n        <p>\n          This module is a follow up to CS1010. It explores two modern\n          programming paradigms, object-oriented programming and functional\n          programming. Through a series of integrated assignments, students will\n          learn to develop medium-scale software programs in the order of\n          thousands of lines of code and tens of classes using objectoriented\n          design principles and advanced programming constructs available in the\n          two paradigms. Topics include objects and classes, composition,\n          association, inheritance, interface, polymorphism, abstract classes,\n          dynamic binding, lambda expression, effect-free programming, first\n          class functions, closures, continuations, monad, etc.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY20/21 Semester 1</li>\n          <li>AY19/20 Special Term 1</li>\n          <li>AY19/20 Semester 2</li>\n          <li>AY19/20 Semester 1</li>\n          <li>AY18/19 Semester 2</li>\n        </ul>\n      </Card>\n    </main>\n  );\n}\n"
        ],
        "mappings": "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"
      }
    },
    {
      "name": "solid-start-file-system-router",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { getNextMarker as _$getNextMarker } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<em>Software Development Fundamentals`),\n  _tmpl$2 = /*#__PURE__*/_$template(`<h3>Course Description`),\n  _tmpl$3 = /*#__PURE__*/_$template(`<p>This module aims to introduce non-computing students to the principles and concepts of software development at an accelerated pace. Students will be introduced to the basics of programming (control flow, code and data abstraction, recursion, types, OO), development methodology (ensuring correctness, testing, debugging), simple data structures and algorithms (lists, maps, sorting), and software engineering principles. Through hands on assignments and projects, students will learn good software development practices (documentation, style) and experience a typical software engineering cycle.`),\n  _tmpl$4 = /*#__PURE__*/_$template(`<h3> Semesters Taught`),\n  _tmpl$5 = /*#__PURE__*/_$template(`<ul><li>AY23/24 Semester 2</li> <li>AY22/23 Semester 2</li> <li>AY22/23 Semester 1</li> <li>AY21/22 Semester 2</li> <li>AY21/22 Semester 1</li><li> AY20/21 Semester 2`),\n  _tmpl$6 = /*#__PURE__*/_$template(`<em>Industry Readiness: Security Best Practices`),\n  _tmpl$7 = /*#__PURE__*/_$template(`<p>Malicious exploitation of vulnerable applications running on the web can have disastrous consequences. This module aims to introduce application security considerations and provide practical experience on secure coding practices, focusing on web-based applications. Topics covered include fundamental security concepts (e.g., encryption, authentication, authorization), secure coding practices (e.g., handling of cookies, passwords, errors), secure design and deployment principles (e.g., threat modelling, vulnerability scanning), along with industry standards (e.g., OWASP), tools, common threats and defense against them.`),\n  _tmpl$8 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 1`),\n  _tmpl$9 = /*#__PURE__*/_$template(`<em>High-Throughput Stream Programming`),\n  _tmpl$10 = /*#__PURE__*/_$template(`<p>The global availability of data has reached a level where aggregating data into generic, general-purpose “stores” is no longer feasible. Having data collections statically available for querying by interested parties on demand is increasingly becoming the way of the past. Instead, a new paradigm, called Data Streaming, has emerged recently. In this paradigm, data is bundled into high-throughput \"streams\" that are sharded efficiently across a large number of network nodes. Consumers, sometimes counted in hundreds of thousands, or millions, \"subscribe\" to data subsets and are notified when new data becomes available, being under the obligation to process it immediately, or lose it. Consequently, data storage is no longer centralized, but rather distributed into many smaller-sized abstract collections. This new approach to \"Big Data\" requires a new set of tools, platforms, and solution patterns. In this course we propose to explore several facets of this new paradigm:`),\n  _tmpl$11 = /*#__PURE__*/_$template(`<ul><li>The Stream paradigm introduced in Java 8.</li><li>Platforms that implement Data Streaming, such as Kafka, and the Java bindings in the library KafkaConnect.</li><li>Computing paradigms for stream processing, such as Reactive Programming, and the library RxJava.</li><li>High-performance stream computing platforms, such as Flink.`),\n  _tmpl$12 = /*#__PURE__*/_$template(`<p>The course will be using Java as the main vehicle for introducing concepts and showcasing examples.`),\n  _tmpl$13 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 2`),\n  _tmpl$14 = /*#__PURE__*/_$template(`<em>Data Structures & Algorithms`),\n  _tmpl$15 = /*#__PURE__*/_$template(`<p>This module introduces non-computing students to efficient computational problem solving in an accelerated pace. Students will learn to formulate a computational problem, identify the data required and come up with appropriate data structures to represent them, and apply known strategies to design an algorithm to solve the problem. Students will also learn to quantify the space and time complexity of an algorithm, prove the correctness of an algorithm, and the limits of computation. Topics include common data structures and their algorithms (lists, hash tables, heap, trees, graphs), algorithmic problem solving paradigms (greedy, divide and conquer, dynamic programming), and NP-completeness.`),\n  _tmpl$16 = /*#__PURE__*/_$template(`<p>AY20/21 Semester 2`),\n  _tmpl$17 = /*#__PURE__*/_$template(`<em>Enterprise Systems Architecture Fundamentals`),\n  _tmpl$18 = /*#__PURE__*/_$template(`<p>This module aims to equip non-computing students with fundamental knowledge in architecting and designing modern Enterprise Systems in organisations that can be reasonably complex, scalable, distributed, component-based and missioncritical. Students will develop an understanding of high-level concepts such as enterprise architecture and software architecture. They will them move on to acquire fundamental systems analysis and design techniques such as object-oriented requirements analysis and design using the Unified Modelling Language.`),\n  _tmpl$19 = /*#__PURE__*/_$template(`<em>Programming Methodology`),\n  _tmpl$20 = /*#__PURE__*/_$template(`<p>This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.`),\n  _tmpl$21 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 2</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2</li><li>AY18/19 Semester 1`),\n  _tmpl$22 = /*#__PURE__*/_$template(`<p>This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.`),\n  _tmpl$23 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 1</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2`),\n  _tmpl$24 = /*#__PURE__*/_$template(`<main><!$><!/><h1>Teaching</h1><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/>`);\nimport { Title } from \"solid-start\";\nimport Card from \"../components/Card\";\nexport default function Teaching() {\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$24),\n      _el$40 = _el$.firstChild,\n      [_el$41, _co$] = _$getNextMarker(_el$40.nextSibling),\n      _el$2 = _el$41.nextSibling,\n      _el$42 = _el$2.nextSibling,\n      [_el$43, _co$2] = _$getNextMarker(_el$42.nextSibling),\n      _el$44 = _el$43.nextSibling,\n      [_el$45, _co$3] = _$getNextMarker(_el$44.nextSibling),\n      _el$46 = _el$45.nextSibling,\n      [_el$47, _co$4] = _$getNextMarker(_el$46.nextSibling),\n      _el$48 = _el$47.nextSibling,\n      [_el$49, _co$5] = _$getNextMarker(_el$48.nextSibling),\n      _el$50 = _el$49.nextSibling,\n      [_el$51, _co$6] = _$getNextMarker(_el$50.nextSibling),\n      _el$52 = _el$51.nextSibling,\n      [_el$53, _co$7] = _$getNextMarker(_el$52.nextSibling),\n      _el$54 = _el$53.nextSibling,\n      [_el$55, _co$8] = _$getNextMarker(_el$54.nextSibling);\n    _$insert(_el$, _$createComponent(Title, {\n      children: \"Teaching - Foo Yong Qi\"\n    }), _el$41, _co$);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5001\",\n      header_color: \"yellow\",\n      border: \"peach\",\n      get children() {\n        return [_$getNextElement(_tmpl$), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$3), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$5)];\n      }\n    }), _el$43, _co$2);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100E\",\n      header_color: \"green\",\n      border: \"lavender\",\n      get children() {\n        return [_$getNextElement(_tmpl$6), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$7), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$8)];\n      }\n    }), _el$45, _co$3);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100B\",\n      header_color: \"blue\",\n      border: \"maroon\",\n      get children() {\n        return [_$getNextElement(_tmpl$9), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$10), _$getNextElement(_tmpl$11), _$getNextElement(_tmpl$12), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$13)];\n      }\n    }), _el$47, _co$4);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5003\",\n      header_color: \"lavender\",\n      border: \"red\",\n      get children() {\n        return [_$getNextElement(_tmpl$14), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$15), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$49, _co$5);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5004\",\n      header_color: \"peach\",\n      border: \"teal\",\n      get children() {\n        return [_$getNextElement(_tmpl$17), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$18), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$51, _co$6);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS1010E\",\n      header_color: \"rosewater\",\n      border: \"green\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$20), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$21)];\n      }\n    }), _el$53, _co$7);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS2030/S\",\n      header_color: \"mauve\",\n      border: \"flamingo\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$22), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$23)];\n      }\n    }), _el$55, _co$8);\n    return _el$;\n  })();\n}",
      "start": 1698297491147,
      "end": 1698297491215,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "Title",
          "Card",
          "Teaching",
          "_el$",
          "_$getNextElement",
          "_tmpl$24",
          "_el$40",
          "firstChild",
          "_el$41",
          "_co$",
          "_$getNextMarker",
          "nextSibling",
          "_el$2",
          "_el$42",
          "_el$43",
          "_co$2",
          "_el$44",
          "_el$45",
          "_co$3",
          "_el$46",
          "_el$47",
          "_co$4",
          "_el$48",
          "_el$49",
          "_co$5",
          "_el$50",
          "_el$51",
          "_co$6",
          "_el$52",
          "_el$53",
          "_co$7",
          "_el$54",
          "_el$55",
          "_co$8",
          "_$insert",
          "_$createComponent",
          "children",
          "header",
          "header_color",
          "border",
          "_tmpl$",
          "_tmpl$2",
          "_tmpl$3",
          "_tmpl$4",
          "_tmpl$5",
          "_tmpl$6",
          "_tmpl$7",
          "_tmpl$8",
          "_tmpl$9",
          "_tmpl$10",
          "_tmpl$11",
          "_tmpl$12",
          "_tmpl$13",
          "_tmpl$14",
          "_tmpl$15",
          "_tmpl$16",
          "_tmpl$17",
          "_tmpl$18",
          "_tmpl$19",
          "_tmpl$20",
          "_tmpl$21",
          "_tmpl$22",
          "_tmpl$23"
        ],
        "sources": [
          "/home/yongqi/Repositories/yonggqiii.github.io/src/routes/teaching.tsx"
        ],
        "sourcesContent": [
          "import { Title } from \"solid-start\";\nimport Card from \"../components/Card\";\nexport default function Teaching() {\n  return (\n    <main>\n      <Title>Teaching - Foo Yong Qi</Title>\n      <h1>Teaching</h1>\n      <Card header=\"IT5001\" header_color=\"yellow\" border=\"peach\">\n        <em>Software Development Fundamentals</em>\n        <h3>Course Description</h3>\n        <p>\n          This module aims to introduce non-computing students to the principles\n          and concepts of software development at an accelerated pace. Students\n          will be introduced to the basics of programming (control flow, code\n          and data abstraction, recursion, types, OO), development methodology\n          (ensuring correctness, testing, debugging), simple data structures and\n          algorithms (lists, maps, sorting), and software engineering\n          principles. Through hands on assignments and projects, students will\n          learn good software development practices (documentation, style) and\n          experience a typical software engineering cycle.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY23/24 Semester 2</li> <li>AY22/23 Semester 2</li>{\" \"}\n          <li>AY22/23 Semester 1</li> <li>AY21/22 Semester 2</li>{\" \"}\n          <li>AY21/22 Semester 1</li>\n          <li> AY20/21 Semester 2</li>\n        </ul>\n      </Card>\n      <Card header=\"IT5100E\" header_color=\"green\" border=\"lavender\">\n        <em>Industry Readiness: Security Best Practices</em>\n        <h3>Course Description</h3>\n        <p>\n          Malicious exploitation of vulnerable applications running on the web\n          can have disastrous consequences. This module aims to introduce\n          application security considerations and provide practical experience\n          on secure coding practices, focusing on web-based applications. Topics\n          covered include fundamental security concepts (e.g., encryption,\n          authentication, authorization), secure coding practices (e.g.,\n          handling of cookies, passwords, errors), secure design and deployment\n          principles (e.g., threat modelling, vulnerability scanning), along\n          with industry standards (e.g., OWASP), tools, common threats and\n          defense against them.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY23/24 Semester 1</p>\n      </Card>\n      <Card header=\"IT5100B\" header_color=\"blue\" border=\"maroon\">\n        <em>High-Throughput Stream Programming</em>\n        <h3>Course Description</h3>\n        <p>\n          The global availability of data has reached a level where aggregating\n          data into generic, general-purpose “stores” is no longer feasible.\n          Having data collections statically available for querying by\n          interested parties on demand is increasingly becoming the way of the\n          past. Instead, a new paradigm, called Data Streaming, has emerged\n          recently. In this paradigm, data is bundled into high-throughput\n          \"streams\" that are sharded efficiently across a large number of\n          network nodes. Consumers, sometimes counted in hundreds of thousands,\n          or millions, \"subscribe\" to data subsets and are notified when new\n          data becomes available, being under the obligation to process it\n          immediately, or lose it. Consequently, data storage is no longer\n          centralized, but rather distributed into many smaller-sized abstract\n          collections. This new approach to \"Big Data\" requires a new set of\n          tools, platforms, and solution patterns. In this course we propose to\n          explore several facets of this new paradigm:\n        </p>\n        <ul>\n          <li>The Stream paradigm introduced in Java 8.</li>\n          <li>\n            Platforms that implement Data Streaming, such as Kafka, and the Java\n            bindings in the library KafkaConnect.\n          </li>\n          <li>\n            Computing paradigms for stream processing, such as Reactive\n            Programming, and the library RxJava.\n          </li>\n          <li>High-performance stream computing platforms, such as Flink.</li>\n        </ul>\n        <p>\n          The course will be using Java as the main vehicle for introducing\n          concepts and showcasing examples.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY23/24 Semester 2</p>\n      </Card>\n      <Card header=\"IT5003\" header_color=\"lavender\" border=\"red\">\n        <em>Data Structures & Algorithms</em>\n        <h3>Course Description</h3>\n        <p>\n          This module introduces non-computing students to efficient\n          computational problem solving in an accelerated pace. Students will\n          learn to formulate a computational problem, identify the data required\n          and come up with appropriate data structures to represent them, and\n          apply known strategies to design an algorithm to solve the problem.\n          Students will also learn to quantify the space and time complexity of\n          an algorithm, prove the correctness of an algorithm, and the limits of\n          computation. Topics include common data structures and their\n          algorithms (lists, hash tables, heap, trees, graphs), algorithmic\n          problem solving paradigms (greedy, divide and conquer, dynamic\n          programming), and NP-completeness.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY20/21 Semester 2</p>\n      </Card>\n      <Card header=\"IT5004\" header_color=\"peach\" border=\"teal\">\n        <em>Enterprise Systems Architecture Fundamentals</em>\n        <h3>Course Description</h3>\n        <p>\n          This module aims to equip non-computing students with fundamental\n          knowledge in architecting and designing modern Enterprise Systems in\n          organisations that can be reasonably complex, scalable, distributed,\n          component-based and missioncritical. Students will develop an\n          understanding of high-level concepts such as enterprise architecture\n          and software architecture. They will them move on to acquire\n          fundamental systems analysis and design techniques such as\n          object-oriented requirements analysis and design using the Unified\n          Modelling Language.\n        </p>\n        <h3> Semesters Taught</h3>\n        <p>AY20/21 Semester 2</p>\n      </Card>\n      <Card header=\"CS1010E\" header_color=\"rosewater\" border=\"green\">\n        <em>Programming Methodology</em>\n        <h3>Course Description</h3>\n        <p>\n          This module introduces the fundamental concepts of problem solving by\n          computing and programming using an imperative programming language. It\n          is the first and foremost introductory course to computing. Topics\n          covered include computational thinking and computational problem\n          solving, designing and specifying an algorithm, basic problem\n          formulation and problem solving approaches, program development,\n          coding, testing and debugging, fundamental programming constructs\n          (variables, types, expressions, assignments, functions, control\n          structures, etc.), fundamental data structures (arrays, strings,\n          composite data types), basic sorting, and recursion.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY20/21 Semester 1</li>\n          <li>AY19/20 Special Term 2</li>\n          <li>AY19/20 Semester 2</li>\n          <li>AY19/20 Semester 1</li>\n          <li>AY18/19 Semester 2</li>\n          <li>AY18/19 Semester 1</li>\n        </ul>\n      </Card>\n      <Card header=\"CS2030/S\" header_color=\"mauve\" border=\"flamingo\">\n        <em>Programming Methodology</em>\n        <h3>Course Description</h3>\n        <p>\n          This module is a follow up to CS1010. It explores two modern\n          programming paradigms, object-oriented programming and functional\n          programming. Through a series of integrated assignments, students will\n          learn to develop medium-scale software programs in the order of\n          thousands of lines of code and tens of classes using objectoriented\n          design principles and advanced programming constructs available in the\n          two paradigms. Topics include objects and classes, composition,\n          association, inheritance, interface, polymorphism, abstract classes,\n          dynamic binding, lambda expression, effect-free programming, first\n          class functions, closures, continuations, monad, etc.\n        </p>\n        <h3> Semesters Taught</h3>\n        <ul>\n          <li>AY20/21 Semester 1</li>\n          <li>AY19/20 Special Term 1</li>\n          <li>AY19/20 Semester 2</li>\n          <li>AY19/20 Semester 1</li>\n          <li>AY18/19 Semester 2</li>\n        </ul>\n      </Card>\n    </main>\n  );\n}\n"
        ],
        "mappings": "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"
      }
    },
    {
      "name": "solid",
      "result": "import { $$component as _$$component } from \"solid-refresh\";\nimport { $$refresh as _$$refresh } from \"solid-refresh\";\nimport { $$registry as _$$registry } from \"solid-refresh\";\nconst _REGISTRY = _$$registry();\nimport { template as _$template } from \"solid-js/web\";\nimport { getNextMarker as _$getNextMarker } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<em>Software Development Fundamentals`),\n  _tmpl$2 = /*#__PURE__*/_$template(`<h3>Course Description`),\n  _tmpl$3 = /*#__PURE__*/_$template(`<p>This module aims to introduce non-computing students to the principles and concepts of software development at an accelerated pace. Students will be introduced to the basics of programming (control flow, code and data abstraction, recursion, types, OO), development methodology (ensuring correctness, testing, debugging), simple data structures and algorithms (lists, maps, sorting), and software engineering principles. Through hands on assignments and projects, students will learn good software development practices (documentation, style) and experience a typical software engineering cycle.`),\n  _tmpl$4 = /*#__PURE__*/_$template(`<h3> Semesters Taught`),\n  _tmpl$5 = /*#__PURE__*/_$template(`<ul><li>AY23/24 Semester 2</li> <li>AY22/23 Semester 2</li> <li>AY22/23 Semester 1</li> <li>AY21/22 Semester 2</li> <li>AY21/22 Semester 1</li><li> AY20/21 Semester 2`),\n  _tmpl$6 = /*#__PURE__*/_$template(`<em>Industry Readiness: Security Best Practices`),\n  _tmpl$7 = /*#__PURE__*/_$template(`<p>Malicious exploitation of vulnerable applications running on the web can have disastrous consequences. This module aims to introduce application security considerations and provide practical experience on secure coding practices, focusing on web-based applications. Topics covered include fundamental security concepts (e.g., encryption, authentication, authorization), secure coding practices (e.g., handling of cookies, passwords, errors), secure design and deployment principles (e.g., threat modelling, vulnerability scanning), along with industry standards (e.g., OWASP), tools, common threats and defense against them.`),\n  _tmpl$8 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 1`),\n  _tmpl$9 = /*#__PURE__*/_$template(`<em>High-Throughput Stream Programming`),\n  _tmpl$10 = /*#__PURE__*/_$template(`<p>The global availability of data has reached a level where aggregating data into generic, general-purpose “stores” is no longer feasible. Having data collections statically available for querying by interested parties on demand is increasingly becoming the way of the past. Instead, a new paradigm, called Data Streaming, has emerged recently. In this paradigm, data is bundled into high-throughput \"streams\" that are sharded efficiently across a large number of network nodes. Consumers, sometimes counted in hundreds of thousands, or millions, \"subscribe\" to data subsets and are notified when new data becomes available, being under the obligation to process it immediately, or lose it. Consequently, data storage is no longer centralized, but rather distributed into many smaller-sized abstract collections. This new approach to \"Big Data\" requires a new set of tools, platforms, and solution patterns. In this course we propose to explore several facets of this new paradigm:`),\n  _tmpl$11 = /*#__PURE__*/_$template(`<ul><li>The Stream paradigm introduced in Java 8.</li><li>Platforms that implement Data Streaming, such as Kafka, and the Java bindings in the library KafkaConnect.</li><li>Computing paradigms for stream processing, such as Reactive Programming, and the library RxJava.</li><li>High-performance stream computing platforms, such as Flink.`),\n  _tmpl$12 = /*#__PURE__*/_$template(`<p>The course will be using Java as the main vehicle for introducing concepts and showcasing examples.`),\n  _tmpl$13 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 2`),\n  _tmpl$14 = /*#__PURE__*/_$template(`<em>Data Structures & Algorithms`),\n  _tmpl$15 = /*#__PURE__*/_$template(`<p>This module introduces non-computing students to efficient computational problem solving in an accelerated pace. Students will learn to formulate a computational problem, identify the data required and come up with appropriate data structures to represent them, and apply known strategies to design an algorithm to solve the problem. Students will also learn to quantify the space and time complexity of an algorithm, prove the correctness of an algorithm, and the limits of computation. Topics include common data structures and their algorithms (lists, hash tables, heap, trees, graphs), algorithmic problem solving paradigms (greedy, divide and conquer, dynamic programming), and NP-completeness.`),\n  _tmpl$16 = /*#__PURE__*/_$template(`<p>AY20/21 Semester 2`),\n  _tmpl$17 = /*#__PURE__*/_$template(`<em>Enterprise Systems Architecture Fundamentals`),\n  _tmpl$18 = /*#__PURE__*/_$template(`<p>This module aims to equip non-computing students with fundamental knowledge in architecting and designing modern Enterprise Systems in organisations that can be reasonably complex, scalable, distributed, component-based and missioncritical. Students will develop an understanding of high-level concepts such as enterprise architecture and software architecture. They will them move on to acquire fundamental systems analysis and design techniques such as object-oriented requirements analysis and design using the Unified Modelling Language.`),\n  _tmpl$19 = /*#__PURE__*/_$template(`<em>Programming Methodology`),\n  _tmpl$20 = /*#__PURE__*/_$template(`<p>This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.`),\n  _tmpl$21 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 2</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2</li><li>AY18/19 Semester 1`),\n  _tmpl$22 = /*#__PURE__*/_$template(`<p>This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.`),\n  _tmpl$23 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 1</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2`),\n  _tmpl$24 = /*#__PURE__*/_$template(`<main><!$><!/><h1>Teaching</h1><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/>`);\nimport { Title } from \"solid-start\";\nimport Card from \"../components/Card\";\nexport default _$$component(_REGISTRY, \"Teaching\", function Teaching() {\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$24),\n      _el$40 = _el$.firstChild,\n      [_el$41, _co$] = _$getNextMarker(_el$40.nextSibling),\n      _el$2 = _el$41.nextSibling,\n      _el$42 = _el$2.nextSibling,\n      [_el$43, _co$2] = _$getNextMarker(_el$42.nextSibling),\n      _el$44 = _el$43.nextSibling,\n      [_el$45, _co$3] = _$getNextMarker(_el$44.nextSibling),\n      _el$46 = _el$45.nextSibling,\n      [_el$47, _co$4] = _$getNextMarker(_el$46.nextSibling),\n      _el$48 = _el$47.nextSibling,\n      [_el$49, _co$5] = _$getNextMarker(_el$48.nextSibling),\n      _el$50 = _el$49.nextSibling,\n      [_el$51, _co$6] = _$getNextMarker(_el$50.nextSibling),\n      _el$52 = _el$51.nextSibling,\n      [_el$53, _co$7] = _$getNextMarker(_el$52.nextSibling),\n      _el$54 = _el$53.nextSibling,\n      [_el$55, _co$8] = _$getNextMarker(_el$54.nextSibling);\n    _$insert(_el$, _$createComponent(Title, {\n      children: \"Teaching - Foo Yong Qi\"\n    }), _el$41, _co$);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5001\",\n      header_color: \"yellow\",\n      border: \"peach\",\n      get children() {\n        return [_$getNextElement(_tmpl$), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$3), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$5)];\n      }\n    }), _el$43, _co$2);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100E\",\n      header_color: \"green\",\n      border: \"lavender\",\n      get children() {\n        return [_$getNextElement(_tmpl$6), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$7), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$8)];\n      }\n    }), _el$45, _co$3);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100B\",\n      header_color: \"blue\",\n      border: \"maroon\",\n      get children() {\n        return [_$getNextElement(_tmpl$9), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$10), _$getNextElement(_tmpl$11), _$getNextElement(_tmpl$12), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$13)];\n      }\n    }), _el$47, _co$4);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5003\",\n      header_color: \"lavender\",\n      border: \"red\",\n      get children() {\n        return [_$getNextElement(_tmpl$14), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$15), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$49, _co$5);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5004\",\n      header_color: \"peach\",\n      border: \"teal\",\n      get children() {\n        return [_$getNextElement(_tmpl$17), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$18), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$51, _co$6);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS1010E\",\n      header_color: \"rosewater\",\n      border: \"green\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$20), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$21)];\n      }\n    }), _el$53, _co$7);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS2030/S\",\n      header_color: \"mauve\",\n      border: \"flamingo\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$22), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$23)];\n      }\n    }), _el$55, _co$8);\n    return _el$;\n  })();\n}, {\n  location: \"src/routes/teaching.tsx:32:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1698297491215,
      "end": 1698297491236,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "template",
          "_$template",
          "getNextMarker",
          "_$getNextMarker",
          "insert",
          "_$insert",
          "getNextElement",
          "_$getNextElement",
          "createComponent",
          "_$createComponent",
          "_tmpl$",
          "_tmpl$2",
          "_tmpl$3",
          "_tmpl$4",
          "_tmpl$5",
          "_tmpl$6",
          "_tmpl$7",
          "_tmpl$8",
          "_tmpl$9",
          "_tmpl$10",
          "_tmpl$11",
          "_tmpl$12",
          "_tmpl$13",
          "_tmpl$14",
          "_tmpl$15",
          "_tmpl$16",
          "_tmpl$17",
          "_tmpl$18",
          "_tmpl$19",
          "_tmpl$20",
          "_tmpl$21",
          "_tmpl$22",
          "_tmpl$23",
          "_tmpl$24",
          "Title",
          "Card",
          "_$$component",
          "_REGISTRY",
          "Teaching",
          "_el$",
          "_el$40",
          "firstChild",
          "_el$41",
          "_co$",
          "nextSibling",
          "_el$2",
          "_el$42",
          "_el$43",
          "_co$2",
          "_el$44",
          "_el$45",
          "_co$3",
          "_el$46",
          "_el$47",
          "_co$4",
          "_el$48",
          "_el$49",
          "_co$5",
          "_el$50",
          "_el$51",
          "_co$6",
          "_el$52",
          "_el$53",
          "_co$7",
          "_el$54",
          "_el$55",
          "_co$8",
          "children",
          "header",
          "header_color",
          "border",
          "location",
          "import",
          "meta",
          "hot",
          "_$$refresh",
          "accept"
        ],
        "sources": [
          "/home/yongqi/Repositories/yonggqiii.github.io/src/routes/teaching.tsx"
        ],
        "sourcesContent": [
          "import { template as _$template } from \"solid-js/web\";\nimport { getNextMarker as _$getNextMarker } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<em>Software Development Fundamentals`),\n  _tmpl$2 = /*#__PURE__*/_$template(`<h3>Course Description`),\n  _tmpl$3 = /*#__PURE__*/_$template(`<p>This module aims to introduce non-computing students to the principles and concepts of software development at an accelerated pace. Students will be introduced to the basics of programming (control flow, code and data abstraction, recursion, types, OO), development methodology (ensuring correctness, testing, debugging), simple data structures and algorithms (lists, maps, sorting), and software engineering principles. Through hands on assignments and projects, students will learn good software development practices (documentation, style) and experience a typical software engineering cycle.`),\n  _tmpl$4 = /*#__PURE__*/_$template(`<h3> Semesters Taught`),\n  _tmpl$5 = /*#__PURE__*/_$template(`<ul><li>AY23/24 Semester 2</li> <li>AY22/23 Semester 2</li> <li>AY22/23 Semester 1</li> <li>AY21/22 Semester 2</li> <li>AY21/22 Semester 1</li><li> AY20/21 Semester 2`),\n  _tmpl$6 = /*#__PURE__*/_$template(`<em>Industry Readiness: Security Best Practices`),\n  _tmpl$7 = /*#__PURE__*/_$template(`<p>Malicious exploitation of vulnerable applications running on the web can have disastrous consequences. This module aims to introduce application security considerations and provide practical experience on secure coding practices, focusing on web-based applications. Topics covered include fundamental security concepts (e.g., encryption, authentication, authorization), secure coding practices (e.g., handling of cookies, passwords, errors), secure design and deployment principles (e.g., threat modelling, vulnerability scanning), along with industry standards (e.g., OWASP), tools, common threats and defense against them.`),\n  _tmpl$8 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 1`),\n  _tmpl$9 = /*#__PURE__*/_$template(`<em>High-Throughput Stream Programming`),\n  _tmpl$10 = /*#__PURE__*/_$template(`<p>The global availability of data has reached a level where aggregating data into generic, general-purpose “stores” is no longer feasible. Having data collections statically available for querying by interested parties on demand is increasingly becoming the way of the past. Instead, a new paradigm, called Data Streaming, has emerged recently. In this paradigm, data is bundled into high-throughput \"streams\" that are sharded efficiently across a large number of network nodes. Consumers, sometimes counted in hundreds of thousands, or millions, \"subscribe\" to data subsets and are notified when new data becomes available, being under the obligation to process it immediately, or lose it. Consequently, data storage is no longer centralized, but rather distributed into many smaller-sized abstract collections. This new approach to \"Big Data\" requires a new set of tools, platforms, and solution patterns. In this course we propose to explore several facets of this new paradigm:`),\n  _tmpl$11 = /*#__PURE__*/_$template(`<ul><li>The Stream paradigm introduced in Java 8.</li><li>Platforms that implement Data Streaming, such as Kafka, and the Java bindings in the library KafkaConnect.</li><li>Computing paradigms for stream processing, such as Reactive Programming, and the library RxJava.</li><li>High-performance stream computing platforms, such as Flink.`),\n  _tmpl$12 = /*#__PURE__*/_$template(`<p>The course will be using Java as the main vehicle for introducing concepts and showcasing examples.`),\n  _tmpl$13 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 2`),\n  _tmpl$14 = /*#__PURE__*/_$template(`<em>Data Structures & Algorithms`),\n  _tmpl$15 = /*#__PURE__*/_$template(`<p>This module introduces non-computing students to efficient computational problem solving in an accelerated pace. Students will learn to formulate a computational problem, identify the data required and come up with appropriate data structures to represent them, and apply known strategies to design an algorithm to solve the problem. Students will also learn to quantify the space and time complexity of an algorithm, prove the correctness of an algorithm, and the limits of computation. Topics include common data structures and their algorithms (lists, hash tables, heap, trees, graphs), algorithmic problem solving paradigms (greedy, divide and conquer, dynamic programming), and NP-completeness.`),\n  _tmpl$16 = /*#__PURE__*/_$template(`<p>AY20/21 Semester 2`),\n  _tmpl$17 = /*#__PURE__*/_$template(`<em>Enterprise Systems Architecture Fundamentals`),\n  _tmpl$18 = /*#__PURE__*/_$template(`<p>This module aims to equip non-computing students with fundamental knowledge in architecting and designing modern Enterprise Systems in organisations that can be reasonably complex, scalable, distributed, component-based and missioncritical. Students will develop an understanding of high-level concepts such as enterprise architecture and software architecture. They will them move on to acquire fundamental systems analysis and design techniques such as object-oriented requirements analysis and design using the Unified Modelling Language.`),\n  _tmpl$19 = /*#__PURE__*/_$template(`<em>Programming Methodology`),\n  _tmpl$20 = /*#__PURE__*/_$template(`<p>This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.`),\n  _tmpl$21 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 2</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2</li><li>AY18/19 Semester 1`),\n  _tmpl$22 = /*#__PURE__*/_$template(`<p>This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.`),\n  _tmpl$23 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 1</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2`),\n  _tmpl$24 = /*#__PURE__*/_$template(`<main><!$><!/><h1>Teaching</h1><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/>`);\nimport { Title } from \"solid-start\";\nimport Card from \"../components/Card\";\nexport default function Teaching() {\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$24),\n      _el$40 = _el$.firstChild,\n      [_el$41, _co$] = _$getNextMarker(_el$40.nextSibling),\n      _el$2 = _el$41.nextSibling,\n      _el$42 = _el$2.nextSibling,\n      [_el$43, _co$2] = _$getNextMarker(_el$42.nextSibling),\n      _el$44 = _el$43.nextSibling,\n      [_el$45, _co$3] = _$getNextMarker(_el$44.nextSibling),\n      _el$46 = _el$45.nextSibling,\n      [_el$47, _co$4] = _$getNextMarker(_el$46.nextSibling),\n      _el$48 = _el$47.nextSibling,\n      [_el$49, _co$5] = _$getNextMarker(_el$48.nextSibling),\n      _el$50 = _el$49.nextSibling,\n      [_el$51, _co$6] = _$getNextMarker(_el$50.nextSibling),\n      _el$52 = _el$51.nextSibling,\n      [_el$53, _co$7] = _$getNextMarker(_el$52.nextSibling),\n      _el$54 = _el$53.nextSibling,\n      [_el$55, _co$8] = _$getNextMarker(_el$54.nextSibling);\n    _$insert(_el$, _$createComponent(Title, {\n      children: \"Teaching - Foo Yong Qi\"\n    }), _el$41, _co$);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5001\",\n      header_color: \"yellow\",\n      border: \"peach\",\n      get children() {\n        return [_$getNextElement(_tmpl$), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$3), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$5)];\n      }\n    }), _el$43, _co$2);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100E\",\n      header_color: \"green\",\n      border: \"lavender\",\n      get children() {\n        return [_$getNextElement(_tmpl$6), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$7), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$8)];\n      }\n    }), _el$45, _co$3);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100B\",\n      header_color: \"blue\",\n      border: \"maroon\",\n      get children() {\n        return [_$getNextElement(_tmpl$9), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$10), _$getNextElement(_tmpl$11), _$getNextElement(_tmpl$12), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$13)];\n      }\n    }), _el$47, _co$4);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5003\",\n      header_color: \"lavender\",\n      border: \"red\",\n      get children() {\n        return [_$getNextElement(_tmpl$14), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$15), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$49, _co$5);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5004\",\n      header_color: \"peach\",\n      border: \"teal\",\n      get children() {\n        return [_$getNextElement(_tmpl$17), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$18), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$51, _co$6);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS1010E\",\n      header_color: \"rosewater\",\n      border: \"green\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$20), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$21)];\n      }\n    }), _el$53, _co$7);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS2030/S\",\n      header_color: \"mauve\",\n      border: \"flamingo\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$22), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$23)];\n      }\n    }), _el$55, _co$8);\n    return _el$;\n  })();\n}"
        ],
        "mappings": "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"
      }
    },
    {
      "name": "vite:css",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "solid-start-server",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1698297491236,
      "end": 1698297491236,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/routes/teaching.tsx\");import { $$component as _$$component } from \"/@solid-refresh\";\nimport { $$refresh as _$$refresh } from \"/@solid-refresh\";\nimport { $$registry as _$$registry } from \"/@solid-refresh\";\nconst _REGISTRY = _$$registry();\nimport { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=086a2f5f\";\nimport { getNextMarker as _$getNextMarker } from \"/node_modules/.vite/deps/solid-js_web.js?v=086a2f5f\";\nimport { insert as _$insert } from \"/node_modules/.vite/deps/solid-js_web.js?v=086a2f5f\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=086a2f5f\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=086a2f5f\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<em>Software Development Fundamentals`),\n  _tmpl$2 = /*#__PURE__*/_$template(`<h3>Course Description`),\n  _tmpl$3 = /*#__PURE__*/_$template(`<p>This module aims to introduce non-computing students to the principles and concepts of software development at an accelerated pace. Students will be introduced to the basics of programming (control flow, code and data abstraction, recursion, types, OO), development methodology (ensuring correctness, testing, debugging), simple data structures and algorithms (lists, maps, sorting), and software engineering principles. Through hands on assignments and projects, students will learn good software development practices (documentation, style) and experience a typical software engineering cycle.`),\n  _tmpl$4 = /*#__PURE__*/_$template(`<h3> Semesters Taught`),\n  _tmpl$5 = /*#__PURE__*/_$template(`<ul><li>AY23/24 Semester 2</li> <li>AY22/23 Semester 2</li> <li>AY22/23 Semester 1</li> <li>AY21/22 Semester 2</li> <li>AY21/22 Semester 1</li><li> AY20/21 Semester 2`),\n  _tmpl$6 = /*#__PURE__*/_$template(`<em>Industry Readiness: Security Best Practices`),\n  _tmpl$7 = /*#__PURE__*/_$template(`<p>Malicious exploitation of vulnerable applications running on the web can have disastrous consequences. This module aims to introduce application security considerations and provide practical experience on secure coding practices, focusing on web-based applications. Topics covered include fundamental security concepts (e.g., encryption, authentication, authorization), secure coding practices (e.g., handling of cookies, passwords, errors), secure design and deployment principles (e.g., threat modelling, vulnerability scanning), along with industry standards (e.g., OWASP), tools, common threats and defense against them.`),\n  _tmpl$8 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 1`),\n  _tmpl$9 = /*#__PURE__*/_$template(`<em>High-Throughput Stream Programming`),\n  _tmpl$10 = /*#__PURE__*/_$template(`<p>The global availability of data has reached a level where aggregating data into generic, general-purpose “stores” is no longer feasible. Having data collections statically available for querying by interested parties on demand is increasingly becoming the way of the past. Instead, a new paradigm, called Data Streaming, has emerged recently. In this paradigm, data is bundled into high-throughput \"streams\" that are sharded efficiently across a large number of network nodes. Consumers, sometimes counted in hundreds of thousands, or millions, \"subscribe\" to data subsets and are notified when new data becomes available, being under the obligation to process it immediately, or lose it. Consequently, data storage is no longer centralized, but rather distributed into many smaller-sized abstract collections. This new approach to \"Big Data\" requires a new set of tools, platforms, and solution patterns. In this course we propose to explore several facets of this new paradigm:`),\n  _tmpl$11 = /*#__PURE__*/_$template(`<ul><li>The Stream paradigm introduced in Java 8.</li><li>Platforms that implement Data Streaming, such as Kafka, and the Java bindings in the library KafkaConnect.</li><li>Computing paradigms for stream processing, such as Reactive Programming, and the library RxJava.</li><li>High-performance stream computing platforms, such as Flink.`),\n  _tmpl$12 = /*#__PURE__*/_$template(`<p>The course will be using Java as the main vehicle for introducing concepts and showcasing examples.`),\n  _tmpl$13 = /*#__PURE__*/_$template(`<p>AY23/24 Semester 2`),\n  _tmpl$14 = /*#__PURE__*/_$template(`<em>Data Structures & Algorithms`),\n  _tmpl$15 = /*#__PURE__*/_$template(`<p>This module introduces non-computing students to efficient computational problem solving in an accelerated pace. Students will learn to formulate a computational problem, identify the data required and come up with appropriate data structures to represent them, and apply known strategies to design an algorithm to solve the problem. Students will also learn to quantify the space and time complexity of an algorithm, prove the correctness of an algorithm, and the limits of computation. Topics include common data structures and their algorithms (lists, hash tables, heap, trees, graphs), algorithmic problem solving paradigms (greedy, divide and conquer, dynamic programming), and NP-completeness.`),\n  _tmpl$16 = /*#__PURE__*/_$template(`<p>AY20/21 Semester 2`),\n  _tmpl$17 = /*#__PURE__*/_$template(`<em>Enterprise Systems Architecture Fundamentals`),\n  _tmpl$18 = /*#__PURE__*/_$template(`<p>This module aims to equip non-computing students with fundamental knowledge in architecting and designing modern Enterprise Systems in organisations that can be reasonably complex, scalable, distributed, component-based and missioncritical. Students will develop an understanding of high-level concepts such as enterprise architecture and software architecture. They will them move on to acquire fundamental systems analysis and design techniques such as object-oriented requirements analysis and design using the Unified Modelling Language.`),\n  _tmpl$19 = /*#__PURE__*/_$template(`<em>Programming Methodology`),\n  _tmpl$20 = /*#__PURE__*/_$template(`<p>This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.`),\n  _tmpl$21 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 2</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2</li><li>AY18/19 Semester 1`),\n  _tmpl$22 = /*#__PURE__*/_$template(`<p>This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.`),\n  _tmpl$23 = /*#__PURE__*/_$template(`<ul><li>AY20/21 Semester 1</li><li>AY19/20 Special Term 1</li><li>AY19/20 Semester 2</li><li>AY19/20 Semester 1</li><li>AY18/19 Semester 2`),\n  _tmpl$24 = /*#__PURE__*/_$template(`<main><!$><!/><h1>Teaching</h1><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/><!$><!/>`);\nimport { Title } from \"/node_modules/solid-start/index.tsx?v=086a2f5f\";\nimport Card from \"/src/components/Card.tsx\";\nexport default _$$component(_REGISTRY, \"Teaching\", function Teaching() {\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$24),\n      _el$40 = _el$.firstChild,\n      [_el$41, _co$] = _$getNextMarker(_el$40.nextSibling),\n      _el$2 = _el$41.nextSibling,\n      _el$42 = _el$2.nextSibling,\n      [_el$43, _co$2] = _$getNextMarker(_el$42.nextSibling),\n      _el$44 = _el$43.nextSibling,\n      [_el$45, _co$3] = _$getNextMarker(_el$44.nextSibling),\n      _el$46 = _el$45.nextSibling,\n      [_el$47, _co$4] = _$getNextMarker(_el$46.nextSibling),\n      _el$48 = _el$47.nextSibling,\n      [_el$49, _co$5] = _$getNextMarker(_el$48.nextSibling),\n      _el$50 = _el$49.nextSibling,\n      [_el$51, _co$6] = _$getNextMarker(_el$50.nextSibling),\n      _el$52 = _el$51.nextSibling,\n      [_el$53, _co$7] = _$getNextMarker(_el$52.nextSibling),\n      _el$54 = _el$53.nextSibling,\n      [_el$55, _co$8] = _$getNextMarker(_el$54.nextSibling);\n    _$insert(_el$, _$createComponent(Title, {\n      children: \"Teaching - Foo Yong Qi\"\n    }), _el$41, _co$);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5001\",\n      header_color: \"yellow\",\n      border: \"peach\",\n      get children() {\n        return [_$getNextElement(_tmpl$), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$3), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$5)];\n      }\n    }), _el$43, _co$2);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100E\",\n      header_color: \"green\",\n      border: \"lavender\",\n      get children() {\n        return [_$getNextElement(_tmpl$6), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$7), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$8)];\n      }\n    }), _el$45, _co$3);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5100B\",\n      header_color: \"blue\",\n      border: \"maroon\",\n      get children() {\n        return [_$getNextElement(_tmpl$9), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$10), _$getNextElement(_tmpl$11), _$getNextElement(_tmpl$12), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$13)];\n      }\n    }), _el$47, _co$4);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5003\",\n      header_color: \"lavender\",\n      border: \"red\",\n      get children() {\n        return [_$getNextElement(_tmpl$14), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$15), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$49, _co$5);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"IT5004\",\n      header_color: \"peach\",\n      border: \"teal\",\n      get children() {\n        return [_$getNextElement(_tmpl$17), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$18), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$16)];\n      }\n    }), _el$51, _co$6);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS1010E\",\n      header_color: \"rosewater\",\n      border: \"green\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$20), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$21)];\n      }\n    }), _el$53, _co$7);\n    _$insert(_el$, _$createComponent(Card, {\n      header: \"CS2030/S\",\n      header_color: \"mauve\",\n      border: \"flamingo\",\n      get children() {\n        return [_$getNextElement(_tmpl$19), _$getNextElement(_tmpl$2), _$getNextElement(_tmpl$22), _$getNextElement(_tmpl$4), _$getNextElement(_tmpl$23)];\n      }\n    }), _el$55, _co$8);\n    return _el$;\n  })();\n}, {\n  location: \"src/routes/teaching.tsx:32:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}",
      "start": 1698297491236,
      "end": 1698297491237,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
