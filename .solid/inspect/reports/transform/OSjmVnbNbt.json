{
  "resolvedId": "/home/yongqi/Repositories/yonggqiii.github.io/node_modules/@solidjs/meta/dist/index.jsx?v=f4e4b3e8",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { createContext, createRenderEffect, createUniqueId, onCleanup, sharedConfig, useContext } from \"solid-js\";\nimport { isServer, spread, escape } from \"solid-js/web\";\nexport const MetaContext = createContext();\nconst cascadingTags = [\"title\", \"meta\"];\nconst getTagType = (tag) => tag.tag + (tag.name ? `.${tag.name}\"` : \"\");\nconst MetaProvider = props => {\n    if (!isServer && !sharedConfig.context) {\n        const ssrTags = document.head.querySelectorAll(`[data-sm]`);\n        // `forEach` on `NodeList` is not supported in Googlebot, so use a workaround\n        Array.prototype.forEach.call(ssrTags, (ssrTag) => ssrTag.parentNode.removeChild(ssrTag));\n    }\n    const cascadedTagInstances = new Map();\n    // TODO: use one element for all tags of the same type, just swap out\n    // where the props get applied\n    function getElement(tag) {\n        if (tag.ref) {\n            return tag.ref;\n        }\n        let el = document.querySelector(`[data-sm=\"${tag.id}\"]`);\n        if (el) {\n            if (el.tagName.toLowerCase() !== tag.tag) {\n                if (el.parentNode) {\n                    // remove the old tag\n                    el.parentNode.removeChild(el);\n                }\n                // add the new tag\n                el = document.createElement(tag.tag);\n            }\n            // use the old tag\n            el.removeAttribute(\"data-sm\");\n        }\n        else {\n            // create a new tag\n            el = document.createElement(tag.tag);\n        }\n        return el;\n    }\n    const actions = {\n        addClientTag: (tag) => {\n            let tagType = getTagType(tag);\n            if (cascadingTags.indexOf(tag.tag) !== -1) {\n                //  only cascading tags need to be kept as singletons\n                if (!cascadedTagInstances.has(tagType)) {\n                    cascadedTagInstances.set(tagType, []);\n                }\n                let instances = cascadedTagInstances.get(tagType);\n                let index = instances.length;\n                instances = [...instances, tag];\n                // track indices synchronously\n                cascadedTagInstances.set(tagType, instances);\n                if (!isServer) {\n                    let element = getElement(tag);\n                    tag.ref = element;\n                    spread(element, tag.props);\n                    let lastVisited = null;\n                    for (var i = index - 1; i >= 0; i--) {\n                        if (instances[i] != null) {\n                            lastVisited = instances[i];\n                            break;\n                        }\n                    }\n                    if (element.parentNode != document.head) {\n                        document.head.appendChild(element);\n                    }\n                    if (lastVisited && lastVisited.ref) {\n                        document.head.removeChild(lastVisited.ref);\n                    }\n                }\n                return index;\n            }\n            if (!isServer) {\n                let element = getElement(tag);\n                tag.ref = element;\n                spread(element, tag.props);\n                if (element.parentNode != document.head) {\n                    document.head.appendChild(element);\n                }\n            }\n            return -1;\n        },\n        removeClientTag: (tag, index) => {\n            const tagName = getTagType(tag);\n            if (tag.ref) {\n                const t = cascadedTagInstances.get(tagName);\n                if (t) {\n                    if (tag.ref.parentNode) {\n                        tag.ref.parentNode.removeChild(tag.ref);\n                        for (let i = index - 1; i >= 0; i--) {\n                            if (t[i] != null) {\n                                document.head.appendChild(t[i].ref);\n                            }\n                        }\n                    }\n                    t[index] = null;\n                    cascadedTagInstances.set(tagName, t);\n                }\n                else {\n                    if (tag.ref.parentNode) {\n                        tag.ref.parentNode.removeChild(tag.ref);\n                    }\n                }\n            }\n        }\n    };\n    if (isServer) {\n        actions.addServerTag = (tagDesc) => {\n            const { tags = [] } = props;\n            // tweak only cascading tags\n            if (cascadingTags.indexOf(tagDesc.tag) !== -1) {\n                const index = tags.findIndex(prev => {\n                    const prevName = prev.props.name || prev.props.property;\n                    const nextName = tagDesc.props.name || tagDesc.props.property;\n                    return prev.tag === tagDesc.tag && prevName === nextName;\n                });\n                if (index !== -1) {\n                    tags.splice(index, 1);\n                }\n            }\n            tags.push(tagDesc);\n        };\n        if (Array.isArray(props.tags) === false) {\n            throw Error(\"tags array should be passed to <MetaProvider /> in node\");\n        }\n    }\n    return <MetaContext.Provider value={actions}>{props.children}</MetaContext.Provider>;\n};\nconst MetaTag = (tag, props, setting) => {\n    const id = createUniqueId();\n    const c = useContext(MetaContext);\n    if (!c)\n        throw new Error(\"<MetaProvider /> should be in the tree\");\n    useHead({\n        tag,\n        props,\n        setting,\n        id,\n        get name() {\n            return props.name || props.property;\n        }\n    });\n    return null;\n};\nexport { MetaProvider };\nexport function useHead(tagDesc) {\n    const { addClientTag, removeClientTag, addServerTag } = useContext(MetaContext);\n    createRenderEffect(() => {\n        if (!isServer) {\n            let index = addClientTag(tagDesc);\n            onCleanup(() => removeClientTag(tagDesc, index));\n        }\n    });\n    if (isServer) {\n        addServerTag(tagDesc);\n        return null;\n    }\n}\nexport function renderTags(tags) {\n    return tags\n        .map(tag => {\n        const keys = Object.keys(tag.props);\n        const props = keys\n            .map(k => k === \"children\"\n            ? \"\"\n            : ` ${k}=\"${\n            // @ts-expect-error\n            escape(tag.props[k], true)}\"`)\n            .join(\"\");\n        const children = tag.props.children;\n        if (tag.setting?.close) {\n            return `<${tag.tag} data-sm=\"${tag.id}\"${props}>${\n            // @ts-expect-error\n            tag.setting?.escape ? escape(children) : children || \"\"}</${tag.tag}>`;\n        }\n        return `<${tag.tag} data-sm=\"${tag.id}\"${props}/>`;\n    })\n        .join(\"\");\n}\nexport const Title = props => MetaTag(\"title\", props, { escape: true, close: true });\nexport const Style = props => MetaTag(\"style\", props, { close: true });\nexport const Meta = props => MetaTag(\"meta\", props);\nexport const Link = props => MetaTag(\"link\", props);\nexport const Base = props => MetaTag(\"base\", props);\nexport const Stylesheet = props => <Link rel=\"stylesheet\" {...props}/>;\n",
      "start": 1720943932277,
      "end": 1720943932277
    },
    {
      "name": "solid-start-file-system-router",
      "start": 1720943932277,
      "end": 1720943932277,
      "order": "pre"
    },
    {
      "name": "solid",
      "result": "import { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { createContext, createRenderEffect, createUniqueId, onCleanup, sharedConfig, useContext } from \"solid-js\";\nimport { isServer, spread, escape } from \"solid-js/web\";\nexport const MetaContext = createContext();\nconst cascadingTags = [\"title\", \"meta\"];\nconst getTagType = tag => tag.tag + (tag.name ? `.${tag.name}\"` : \"\");\nconst MetaProvider = props => {\n  if (!isServer && !sharedConfig.context) {\n    const ssrTags = document.head.querySelectorAll(`[data-sm]`);\n    // `forEach` on `NodeList` is not supported in Googlebot, so use a workaround\n    Array.prototype.forEach.call(ssrTags, ssrTag => ssrTag.parentNode.removeChild(ssrTag));\n  }\n  const cascadedTagInstances = new Map();\n  // TODO: use one element for all tags of the same type, just swap out\n  // where the props get applied\n  function getElement(tag) {\n    if (tag.ref) {\n      return tag.ref;\n    }\n    let el = document.querySelector(`[data-sm=\"${tag.id}\"]`);\n    if (el) {\n      if (el.tagName.toLowerCase() !== tag.tag) {\n        if (el.parentNode) {\n          // remove the old tag\n          el.parentNode.removeChild(el);\n        }\n        // add the new tag\n        el = document.createElement(tag.tag);\n      }\n      // use the old tag\n      el.removeAttribute(\"data-sm\");\n    } else {\n      // create a new tag\n      el = document.createElement(tag.tag);\n    }\n    return el;\n  }\n  const actions = {\n    addClientTag: tag => {\n      let tagType = getTagType(tag);\n      if (cascadingTags.indexOf(tag.tag) !== -1) {\n        //  only cascading tags need to be kept as singletons\n        if (!cascadedTagInstances.has(tagType)) {\n          cascadedTagInstances.set(tagType, []);\n        }\n        let instances = cascadedTagInstances.get(tagType);\n        let index = instances.length;\n        instances = [...instances, tag];\n        // track indices synchronously\n        cascadedTagInstances.set(tagType, instances);\n        if (!isServer) {\n          let element = getElement(tag);\n          tag.ref = element;\n          spread(element, tag.props);\n          let lastVisited = null;\n          for (var i = index - 1; i >= 0; i--) {\n            if (instances[i] != null) {\n              lastVisited = instances[i];\n              break;\n            }\n          }\n          if (element.parentNode != document.head) {\n            document.head.appendChild(element);\n          }\n          if (lastVisited && lastVisited.ref) {\n            document.head.removeChild(lastVisited.ref);\n          }\n        }\n        return index;\n      }\n      if (!isServer) {\n        let element = getElement(tag);\n        tag.ref = element;\n        spread(element, tag.props);\n        if (element.parentNode != document.head) {\n          document.head.appendChild(element);\n        }\n      }\n      return -1;\n    },\n    removeClientTag: (tag, index) => {\n      const tagName = getTagType(tag);\n      if (tag.ref) {\n        const t = cascadedTagInstances.get(tagName);\n        if (t) {\n          if (tag.ref.parentNode) {\n            tag.ref.parentNode.removeChild(tag.ref);\n            for (let i = index - 1; i >= 0; i--) {\n              if (t[i] != null) {\n                document.head.appendChild(t[i].ref);\n              }\n            }\n          }\n          t[index] = null;\n          cascadedTagInstances.set(tagName, t);\n        } else {\n          if (tag.ref.parentNode) {\n            tag.ref.parentNode.removeChild(tag.ref);\n          }\n        }\n      }\n    }\n  };\n  if (isServer) {\n    actions.addServerTag = tagDesc => {\n      const {\n        tags = []\n      } = props;\n      // tweak only cascading tags\n      if (cascadingTags.indexOf(tagDesc.tag) !== -1) {\n        const index = tags.findIndex(prev => {\n          const prevName = prev.props.name || prev.props.property;\n          const nextName = tagDesc.props.name || tagDesc.props.property;\n          return prev.tag === tagDesc.tag && prevName === nextName;\n        });\n        if (index !== -1) {\n          tags.splice(index, 1);\n        }\n      }\n      tags.push(tagDesc);\n    };\n    if (Array.isArray(props.tags) === false) {\n      throw Error(\"tags array should be passed to <MetaProvider /> in node\");\n    }\n  }\n  return _$createComponent(MetaContext.Provider, {\n    value: actions,\n    get children() {\n      return props.children;\n    }\n  });\n};\nconst MetaTag = (tag, props, setting) => {\n  const id = createUniqueId();\n  const c = useContext(MetaContext);\n  if (!c) throw new Error(\"<MetaProvider /> should be in the tree\");\n  useHead({\n    tag,\n    props,\n    setting,\n    id,\n    get name() {\n      return props.name || props.property;\n    }\n  });\n  return null;\n};\nexport { MetaProvider };\nexport function useHead(tagDesc) {\n  const {\n    addClientTag,\n    removeClientTag,\n    addServerTag\n  } = useContext(MetaContext);\n  createRenderEffect(() => {\n    if (!isServer) {\n      let index = addClientTag(tagDesc);\n      onCleanup(() => removeClientTag(tagDesc, index));\n    }\n  });\n  if (isServer) {\n    addServerTag(tagDesc);\n    return null;\n  }\n}\nexport function renderTags(tags) {\n  return tags.map(tag => {\n    const keys = Object.keys(tag.props);\n    const props = keys.map(k => k === \"children\" ? \"\" : ` ${k}=\"${\n    // @ts-expect-error\n    escape(tag.props[k], true)}\"`).join(\"\");\n    const children = tag.props.children;\n    if (tag.setting?.close) {\n      return `<${tag.tag} data-sm=\"${tag.id}\"${props}>${\n      // @ts-expect-error\n      tag.setting?.escape ? escape(children) : children || \"\"}</${tag.tag}>`;\n    }\n    return `<${tag.tag} data-sm=\"${tag.id}\"${props}/>`;\n  }).join(\"\");\n}\nexport const Title = props => MetaTag(\"title\", props, {\n  escape: true,\n  close: true\n});\nexport const Style = props => MetaTag(\"style\", props, {\n  close: true\n});\nexport const Meta = props => MetaTag(\"meta\", props);\nexport const Link = props => MetaTag(\"link\", props);\nexport const Base = props => MetaTag(\"base\", props);\nexport const Stylesheet = props => _$createComponent(Link, _$mergeProps({\n  rel: \"stylesheet\"\n}, props));",
      "start": 1720943932277,
      "end": 1720943932289,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createContext",
          "createRenderEffect",
          "createUniqueId",
          "onCleanup",
          "sharedConfig",
          "useContext",
          "isServer",
          "spread",
          "escape",
          "MetaContext",
          "cascadingTags",
          "getTagType",
          "tag",
          "name",
          "MetaProvider",
          "props",
          "context",
          "ssrTags",
          "document",
          "head",
          "querySelectorAll",
          "Array",
          "prototype",
          "forEach",
          "call",
          "ssrTag",
          "parentNode",
          "removeChild",
          "cascadedTagInstances",
          "Map",
          "getElement",
          "ref",
          "el",
          "querySelector",
          "id",
          "tagName",
          "toLowerCase",
          "createElement",
          "removeAttribute",
          "actions",
          "addClientTag",
          "tagType",
          "indexOf",
          "has",
          "set",
          "instances",
          "get",
          "index",
          "length",
          "element",
          "lastVisited",
          "i",
          "appendChild",
          "removeClientTag",
          "t",
          "addServerTag",
          "tagDesc",
          "tags",
          "findIndex",
          "prev",
          "prevName",
          "property",
          "nextName",
          "splice",
          "push",
          "isArray",
          "Error",
          "_$createComponent",
          "Provider",
          "value",
          "children",
          "MetaTag",
          "setting",
          "c",
          "useHead",
          "renderTags",
          "map",
          "keys",
          "Object",
          "k",
          "join",
          "close",
          "Title",
          "Style",
          "Meta",
          "Link",
          "Base",
          "Stylesheet",
          "_$mergeProps",
          "rel"
        ],
        "sources": [
          "index.jsx"
        ],
        "sourcesContent": [
          "import { createContext, createRenderEffect, createUniqueId, onCleanup, sharedConfig, useContext } from \"solid-js\";\nimport { isServer, spread, escape } from \"solid-js/web\";\nexport const MetaContext = createContext();\nconst cascadingTags = [\"title\", \"meta\"];\nconst getTagType = (tag) => tag.tag + (tag.name ? `.${tag.name}\"` : \"\");\nconst MetaProvider = props => {\n    if (!isServer && !sharedConfig.context) {\n        const ssrTags = document.head.querySelectorAll(`[data-sm]`);\n        // `forEach` on `NodeList` is not supported in Googlebot, so use a workaround\n        Array.prototype.forEach.call(ssrTags, (ssrTag) => ssrTag.parentNode.removeChild(ssrTag));\n    }\n    const cascadedTagInstances = new Map();\n    // TODO: use one element for all tags of the same type, just swap out\n    // where the props get applied\n    function getElement(tag) {\n        if (tag.ref) {\n            return tag.ref;\n        }\n        let el = document.querySelector(`[data-sm=\"${tag.id}\"]`);\n        if (el) {\n            if (el.tagName.toLowerCase() !== tag.tag) {\n                if (el.parentNode) {\n                    // remove the old tag\n                    el.parentNode.removeChild(el);\n                }\n                // add the new tag\n                el = document.createElement(tag.tag);\n            }\n            // use the old tag\n            el.removeAttribute(\"data-sm\");\n        }\n        else {\n            // create a new tag\n            el = document.createElement(tag.tag);\n        }\n        return el;\n    }\n    const actions = {\n        addClientTag: (tag) => {\n            let tagType = getTagType(tag);\n            if (cascadingTags.indexOf(tag.tag) !== -1) {\n                //  only cascading tags need to be kept as singletons\n                if (!cascadedTagInstances.has(tagType)) {\n                    cascadedTagInstances.set(tagType, []);\n                }\n                let instances = cascadedTagInstances.get(tagType);\n                let index = instances.length;\n                instances = [...instances, tag];\n                // track indices synchronously\n                cascadedTagInstances.set(tagType, instances);\n                if (!isServer) {\n                    let element = getElement(tag);\n                    tag.ref = element;\n                    spread(element, tag.props);\n                    let lastVisited = null;\n                    for (var i = index - 1; i >= 0; i--) {\n                        if (instances[i] != null) {\n                            lastVisited = instances[i];\n                            break;\n                        }\n                    }\n                    if (element.parentNode != document.head) {\n                        document.head.appendChild(element);\n                    }\n                    if (lastVisited && lastVisited.ref) {\n                        document.head.removeChild(lastVisited.ref);\n                    }\n                }\n                return index;\n            }\n            if (!isServer) {\n                let element = getElement(tag);\n                tag.ref = element;\n                spread(element, tag.props);\n                if (element.parentNode != document.head) {\n                    document.head.appendChild(element);\n                }\n            }\n            return -1;\n        },\n        removeClientTag: (tag, index) => {\n            const tagName = getTagType(tag);\n            if (tag.ref) {\n                const t = cascadedTagInstances.get(tagName);\n                if (t) {\n                    if (tag.ref.parentNode) {\n                        tag.ref.parentNode.removeChild(tag.ref);\n                        for (let i = index - 1; i >= 0; i--) {\n                            if (t[i] != null) {\n                                document.head.appendChild(t[i].ref);\n                            }\n                        }\n                    }\n                    t[index] = null;\n                    cascadedTagInstances.set(tagName, t);\n                }\n                else {\n                    if (tag.ref.parentNode) {\n                        tag.ref.parentNode.removeChild(tag.ref);\n                    }\n                }\n            }\n        }\n    };\n    if (isServer) {\n        actions.addServerTag = (tagDesc) => {\n            const { tags = [] } = props;\n            // tweak only cascading tags\n            if (cascadingTags.indexOf(tagDesc.tag) !== -1) {\n                const index = tags.findIndex(prev => {\n                    const prevName = prev.props.name || prev.props.property;\n                    const nextName = tagDesc.props.name || tagDesc.props.property;\n                    return prev.tag === tagDesc.tag && prevName === nextName;\n                });\n                if (index !== -1) {\n                    tags.splice(index, 1);\n                }\n            }\n            tags.push(tagDesc);\n        };\n        if (Array.isArray(props.tags) === false) {\n            throw Error(\"tags array should be passed to <MetaProvider /> in node\");\n        }\n    }\n    return <MetaContext.Provider value={actions}>{props.children}</MetaContext.Provider>;\n};\nconst MetaTag = (tag, props, setting) => {\n    const id = createUniqueId();\n    const c = useContext(MetaContext);\n    if (!c)\n        throw new Error(\"<MetaProvider /> should be in the tree\");\n    useHead({\n        tag,\n        props,\n        setting,\n        id,\n        get name() {\n            return props.name || props.property;\n        }\n    });\n    return null;\n};\nexport { MetaProvider };\nexport function useHead(tagDesc) {\n    const { addClientTag, removeClientTag, addServerTag } = useContext(MetaContext);\n    createRenderEffect(() => {\n        if (!isServer) {\n            let index = addClientTag(tagDesc);\n            onCleanup(() => removeClientTag(tagDesc, index));\n        }\n    });\n    if (isServer) {\n        addServerTag(tagDesc);\n        return null;\n    }\n}\nexport function renderTags(tags) {\n    return tags\n        .map(tag => {\n        const keys = Object.keys(tag.props);\n        const props = keys\n            .map(k => k === \"children\"\n            ? \"\"\n            : ` ${k}=\"${\n            // @ts-expect-error\n            escape(tag.props[k], true)}\"`)\n            .join(\"\");\n        const children = tag.props.children;\n        if (tag.setting?.close) {\n            return `<${tag.tag} data-sm=\"${tag.id}\"${props}>${\n            // @ts-expect-error\n            tag.setting?.escape ? escape(children) : children || \"\"}</${tag.tag}>`;\n        }\n        return `<${tag.tag} data-sm=\"${tag.id}\"${props}/>`;\n    })\n        .join(\"\");\n}\nexport const Title = props => MetaTag(\"title\", props, { escape: true, close: true });\nexport const Style = props => MetaTag(\"style\", props, { close: true });\nexport const Meta = props => MetaTag(\"meta\", props);\nexport const Link = props => MetaTag(\"link\", props);\nexport const Base = props => MetaTag(\"base\", props);\nexport const Stylesheet = props => <Link rel=\"stylesheet\" {...props}/>;\n"
        ],
        "mappings": "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",
        "x_google_ignoreList": [
          0
        ]
      }
    },
    {
      "name": "vite:css",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "solid-start-server",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { mergeProps as _$mergeProps } from \"/node_modules/.vite/deps/solid-js_web.js?v=f4e4b3e8\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=f4e4b3e8\";\nimport { createContext, createRenderEffect, createUniqueId, onCleanup, sharedConfig, useContext } from \"/node_modules/.vite/deps/solid-js.js?v=f4e4b3e8\";\nimport { isServer, spread, escape } from \"/node_modules/.vite/deps/solid-js_web.js?v=f4e4b3e8\";\nexport const MetaContext = createContext();\nconst cascadingTags = [\"title\", \"meta\"];\nconst getTagType = tag => tag.tag + (tag.name ? `.${tag.name}\"` : \"\");\nconst MetaProvider = props => {\n  if (!isServer && !sharedConfig.context) {\n    const ssrTags = document.head.querySelectorAll(`[data-sm]`);\n    // `forEach` on `NodeList` is not supported in Googlebot, so use a workaround\n    Array.prototype.forEach.call(ssrTags, ssrTag => ssrTag.parentNode.removeChild(ssrTag));\n  }\n  const cascadedTagInstances = new Map();\n  // TODO: use one element for all tags of the same type, just swap out\n  // where the props get applied\n  function getElement(tag) {\n    if (tag.ref) {\n      return tag.ref;\n    }\n    let el = document.querySelector(`[data-sm=\"${tag.id}\"]`);\n    if (el) {\n      if (el.tagName.toLowerCase() !== tag.tag) {\n        if (el.parentNode) {\n          // remove the old tag\n          el.parentNode.removeChild(el);\n        }\n        // add the new tag\n        el = document.createElement(tag.tag);\n      }\n      // use the old tag\n      el.removeAttribute(\"data-sm\");\n    } else {\n      // create a new tag\n      el = document.createElement(tag.tag);\n    }\n    return el;\n  }\n  const actions = {\n    addClientTag: tag => {\n      let tagType = getTagType(tag);\n      if (cascadingTags.indexOf(tag.tag) !== -1) {\n        //  only cascading tags need to be kept as singletons\n        if (!cascadedTagInstances.has(tagType)) {\n          cascadedTagInstances.set(tagType, []);\n        }\n        let instances = cascadedTagInstances.get(tagType);\n        let index = instances.length;\n        instances = [...instances, tag];\n        // track indices synchronously\n        cascadedTagInstances.set(tagType, instances);\n        if (!isServer) {\n          let element = getElement(tag);\n          tag.ref = element;\n          spread(element, tag.props);\n          let lastVisited = null;\n          for (var i = index - 1; i >= 0; i--) {\n            if (instances[i] != null) {\n              lastVisited = instances[i];\n              break;\n            }\n          }\n          if (element.parentNode != document.head) {\n            document.head.appendChild(element);\n          }\n          if (lastVisited && lastVisited.ref) {\n            document.head.removeChild(lastVisited.ref);\n          }\n        }\n        return index;\n      }\n      if (!isServer) {\n        let element = getElement(tag);\n        tag.ref = element;\n        spread(element, tag.props);\n        if (element.parentNode != document.head) {\n          document.head.appendChild(element);\n        }\n      }\n      return -1;\n    },\n    removeClientTag: (tag, index) => {\n      const tagName = getTagType(tag);\n      if (tag.ref) {\n        const t = cascadedTagInstances.get(tagName);\n        if (t) {\n          if (tag.ref.parentNode) {\n            tag.ref.parentNode.removeChild(tag.ref);\n            for (let i = index - 1; i >= 0; i--) {\n              if (t[i] != null) {\n                document.head.appendChild(t[i].ref);\n              }\n            }\n          }\n          t[index] = null;\n          cascadedTagInstances.set(tagName, t);\n        } else {\n          if (tag.ref.parentNode) {\n            tag.ref.parentNode.removeChild(tag.ref);\n          }\n        }\n      }\n    }\n  };\n  if (isServer) {\n    actions.addServerTag = tagDesc => {\n      const {\n        tags = []\n      } = props;\n      // tweak only cascading tags\n      if (cascadingTags.indexOf(tagDesc.tag) !== -1) {\n        const index = tags.findIndex(prev => {\n          const prevName = prev.props.name || prev.props.property;\n          const nextName = tagDesc.props.name || tagDesc.props.property;\n          return prev.tag === tagDesc.tag && prevName === nextName;\n        });\n        if (index !== -1) {\n          tags.splice(index, 1);\n        }\n      }\n      tags.push(tagDesc);\n    };\n    if (Array.isArray(props.tags) === false) {\n      throw Error(\"tags array should be passed to <MetaProvider /> in node\");\n    }\n  }\n  return _$createComponent(MetaContext.Provider, {\n    value: actions,\n    get children() {\n      return props.children;\n    }\n  });\n};\nconst MetaTag = (tag, props, setting) => {\n  const id = createUniqueId();\n  const c = useContext(MetaContext);\n  if (!c) throw new Error(\"<MetaProvider /> should be in the tree\");\n  useHead({\n    tag,\n    props,\n    setting,\n    id,\n    get name() {\n      return props.name || props.property;\n    }\n  });\n  return null;\n};\nexport { MetaProvider };\nexport function useHead(tagDesc) {\n  const {\n    addClientTag,\n    removeClientTag,\n    addServerTag\n  } = useContext(MetaContext);\n  createRenderEffect(() => {\n    if (!isServer) {\n      let index = addClientTag(tagDesc);\n      onCleanup(() => removeClientTag(tagDesc, index));\n    }\n  });\n  if (isServer) {\n    addServerTag(tagDesc);\n    return null;\n  }\n}\nexport function renderTags(tags) {\n  return tags.map(tag => {\n    const keys = Object.keys(tag.props);\n    const props = keys.map(k => k === \"children\" ? \"\" : ` ${k}=\"${\n    // @ts-expect-error\n    escape(tag.props[k], true)}\"`).join(\"\");\n    const children = tag.props.children;\n    if (tag.setting?.close) {\n      return `<${tag.tag} data-sm=\"${tag.id}\"${props}>${\n      // @ts-expect-error\n      tag.setting?.escape ? escape(children) : children || \"\"}</${tag.tag}>`;\n    }\n    return `<${tag.tag} data-sm=\"${tag.id}\"${props}/>`;\n  }).join(\"\");\n}\nexport const Title = props => MetaTag(\"title\", props, {\n  escape: true,\n  close: true\n});\nexport const Style = props => MetaTag(\"style\", props, {\n  close: true\n});\nexport const Meta = props => MetaTag(\"meta\", props);\nexport const Link = props => MetaTag(\"link\", props);\nexport const Base = props => MetaTag(\"base\", props);\nexport const Stylesheet = props => _$createComponent(Link, _$mergeProps({\n  rel: \"stylesheet\"\n}, props));",
      "start": 1720943932289,
      "end": 1720943932289,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
