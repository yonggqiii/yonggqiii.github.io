{
  "resolvedId": "/home/yongqi/Repositories/yonggqiii.github.io/node_modules/solid-start/root/Links.tsx?v=f4e4b3e8",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { JSXElement, useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport type { IslandManifest, ManifestEntry, PageEvent } from \"../server/types\";\nimport { routeLayouts } from \"./InlineStyles\";\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nfunction flattenIslands(match: ManifestEntry[], manifest: Record<string, ManifestEntry> | IslandManifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href as keyof typeof manifest] as unknown as IslandManifest | undefined;\n    if (islandManifest) {\n      const res = flattenIslands((islandManifest as IslandManifest).assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\n\nfunction getAssetsFromManifest(\n  manifest: PageEvent[\"env\"][\"manifest\"],\n  routerContext: RouterContext\n) {\n  let match = routerContext.matches ? routerContext.matches.reduce<ManifestEntry[]>((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...((manifest![route.id] || []) as ManifestEntry[]));\n        const layoutsManifestEntries = route.layouts.flatMap(\n          manifestKey => (manifest![manifestKey as keyof typeof manifest] || []) as ManifestEntry[]\n        );\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(...((manifest![\"entry-client\"] || []) as ManifestEntry[]));\n\n  match = manifest ? flattenIslands(match, manifest as any) : [];\n\n  const links = match.reduce((r, src) => {\n    r[src.href] =\n      src.type === \"style\" ? (\n        <link rel=\"stylesheet\" href={src.href} $ServerOnly />\n      ) : src.type === \"script\" ? (\n        <link rel=\"modulepreload\" href={src.href} $ServerOnly />\n      ) : undefined;\n    return r;\n  }, {} as Record<string, JSXElement>);\n\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev &&\n    import.meta.env.START_SSR &&\n    useAssets(() => getAssetsFromManifest(context!.env.manifest, context!.routerContext!));\n  return null;\n}\n",
      "start": 1720943932360,
      "end": 1720943932360
    },
    {
      "name": "solid-start-file-system-router",
      "start": 1720943932360,
      "end": 1720943932360,
      "order": "pre"
    },
    {
      "name": "solid",
      "result": "import { setAttribute as _$setAttribute } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { routeLayouts } from \"./InlineStyles\";\nfunction flattenIslands(match, manifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href];\n    if (islandManifest) {\n      const res = flattenIslands(islandManifest.assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\nfunction getAssetsFromManifest(manifest, routerContext) {\n  let match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...(manifest[route.id] || []));\n        const layoutsManifestEntries = route.layouts.flatMap(manifestKey => manifest[manifestKey] || []);\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(...(manifest[\"entry-client\"] || []));\n  match = manifest ? flattenIslands(match, manifest) : [];\n  const links = match.reduce((r, src) => {\n    r[src.href] = src.type === \"style\" ? (() => {\n      const _el$ = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$, \"href\", src.href));\n      return _el$;\n    })() : src.type === \"script\" ? (() => {\n      const _el$2 = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$2, \"href\", src.href));\n      return _el$2;\n    })() : undefined;\n    return r;\n  }, {});\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev && import.meta.env.START_SSR && useAssets(() => getAssetsFromManifest(context.env.manifest, context.routerContext));\n  return null;\n}",
      "start": 1720943932360,
      "end": 1720943932364,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "useContext",
          "useAssets",
          "ServerContext",
          "routeLayouts",
          "flattenIslands",
          "match",
          "manifest",
          "result",
          "forEach",
          "m",
          "type",
          "islandManifest",
          "href",
          "res",
          "assets",
          "push",
          "getAssetsFromManifest",
          "routerContext",
          "matches",
          "reduce",
          "memo",
          "length",
          "fullPath",
          "previous",
          "originalPath",
          "route",
          "id",
          "layoutsManifestEntries",
          "layouts",
          "flatMap",
          "manifestKey",
          "links",
          "r",
          "src",
          "_el$",
          "_$getNextElement",
          "_$effect",
          "_$setAttribute",
          "_el$2",
          "undefined",
          "Object",
          "values",
          "Links",
          "isDev",
          "import",
          "meta",
          "env",
          "MODE",
          "context",
          "START_SSR"
        ],
        "sources": [
          "Links.tsx"
        ],
        "sourcesContent": [
          "import { JSXElement, useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport type { IslandManifest, ManifestEntry, PageEvent } from \"../server/types\";\nimport { routeLayouts } from \"./InlineStyles\";\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nfunction flattenIslands(match: ManifestEntry[], manifest: Record<string, ManifestEntry> | IslandManifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href as keyof typeof manifest] as unknown as IslandManifest | undefined;\n    if (islandManifest) {\n      const res = flattenIslands((islandManifest as IslandManifest).assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\n\nfunction getAssetsFromManifest(\n  manifest: PageEvent[\"env\"][\"manifest\"],\n  routerContext: RouterContext\n) {\n  let match = routerContext.matches ? routerContext.matches.reduce<ManifestEntry[]>((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...((manifest![route.id] || []) as ManifestEntry[]));\n        const layoutsManifestEntries = route.layouts.flatMap(\n          manifestKey => (manifest![manifestKey as keyof typeof manifest] || []) as ManifestEntry[]\n        );\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(...((manifest![\"entry-client\"] || []) as ManifestEntry[]));\n\n  match = manifest ? flattenIslands(match, manifest as any) : [];\n\n  const links = match.reduce((r, src) => {\n    r[src.href] =\n      src.type === \"style\" ? (\n        <link rel=\"stylesheet\" href={src.href} $ServerOnly />\n      ) : src.type === \"script\" ? (\n        <link rel=\"modulepreload\" href={src.href} $ServerOnly />\n      ) : undefined;\n    return r;\n  }, {} as Record<string, JSXElement>);\n\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev &&\n    import.meta.env.START_SSR &&\n    useAssets(() => getAssetsFromManifest(context!.env.manifest, context!.routerContext!));\n  return null;\n}\n"
        ],
        "mappings": "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",
        "x_google_ignoreList": [
          0
        ]
      }
    },
    {
      "name": "vite:css",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "solid-start-server",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":false};import.meta.env.START_SSR = true;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"/home/yongqi/Repositories/yonggqiii.github.io/src/entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"/home/yongqi/Repositories/yonggqiii.github.io/src/entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"static\";import { setAttribute as _$setAttribute } from \"/node_modules/.vite/deps/solid-js_web.js?v=f4e4b3e8\";\nimport { effect as _$effect } from \"/node_modules/.vite/deps/solid-js_web.js?v=f4e4b3e8\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=f4e4b3e8\";\nimport { useContext } from \"/node_modules/.vite/deps/solid-js.js?v=f4e4b3e8\";\nimport { useAssets } from \"/node_modules/.vite/deps/solid-js_web.js?v=f4e4b3e8\";\nimport { ServerContext } from \"/node_modules/solid-start/server/ServerContext.tsx?v=f4e4b3e8\";\nimport { routeLayouts } from \"/node_modules/solid-start/root/InlineStyles.tsx?v=f4e4b3e8\";\nfunction flattenIslands(match, manifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href];\n    if (islandManifest) {\n      const res = flattenIslands(islandManifest.assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\nfunction getAssetsFromManifest(manifest, routerContext) {\n  let match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...(manifest[route.id] || []));\n        const layoutsManifestEntries = route.layouts.flatMap(manifestKey => manifest[manifestKey] || []);\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(...(manifest[\"entry-client\"] || []));\n  match = manifest ? flattenIslands(match, manifest) : [];\n  const links = match.reduce((r, src) => {\n    r[src.href] = src.type === \"style\" ? (() => {\n      const _el$ = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$, \"href\", src.href));\n      return _el$;\n    })() : src.type === \"script\" ? (() => {\n      const _el$2 = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$2, \"href\", src.href));\n      return _el$2;\n    })() : undefined;\n    return r;\n  }, {});\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev && import.meta.env.START_SSR && useAssets(() => getAssetsFromManifest(context.env.manifest, context.routerContext));\n  return null;\n}",
      "start": 1720943932364,
      "end": 1720943932364,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
